# File: v_info.txt
#
# Do not modify this file unless you know exactly what you are doing,
# unless you wish to risk possible system crashes and broken savefiles.
#

######################################################################
# Documentation updated and accurate as of Poschengband v3.4.0

# This file is used to initialize the "lib/raw/v_info.raw" file, which is
# used to initialize the "room template" information for the Angband game.
# This includes vaults, special rooms and various kinds of wilderness encounters.
# (v stands for vaults. Formerly, only vaults were specified in this file.
# I added support for regular rooms and wilderness encounters for Poschengband).

# === Understanding v_info.txt ===

# Summary:
# N:<name>
# T:<type>:<subtype>[:flag_list]
# W:<level>:<max_level>:<rarity>
# L:<letter>:<Directives>+
# M:lines giving map of vault using symbols below or specified in L: lines

# N:<name>
# This line indicates the beginning of a new entry. You no longer need to specify
# increasing serial numbers. They are calculated automatically, but must 
# not exceed the M:ROOMS line in misc.txt. Since numeric identifiers are not stored
# any place or used explicitly in the code, you may reorder entries in this file as
# you wish. The name field is present for flavor and is only displayed with the
# cheat_rooms option.

# T:<type>:<subtype>[:flag_list]
# 'T' is for type information - room type, subtype and any theme options.
# Type must be one of VAULT, ROOM, WILD, or AMBUSH.
# VAULT Subtype must be one of LESSER or GREATER.
# ROOM Subtype must be NORMAL (perhaps we'll add subtypes in the future?)
# WILD and AMBUSH Subtype is a terrain specifier: WATER, SWAMP, GRASS, TREES, LAVA or MOUNTAIN.
# The flag_list is optional, and may contain one or more of the following
# options (use | to separate multiple options):
#   * GOOD: Only good monsters will be generated.
#   * EVIL: Only evil monsters will be generated.
#   * FRIENDLY: Only friendly monsters will be generated.
#   * NIGHT: This WILD or AMBUSH encounter only happens at night.
#   * DAY: This WILD or AMBUSH encounter only happens at day.
#   * NO_ROTATE: Prevents rotation of the room.
#   * FORMATION: Room is a special monster formation room (like the old pits and nests).
#   * DEBUG: Forces this room to be picked every time (Obviously, for debugging new entries).

# W:<level>:<max_level>:<rarity>
# 'W' is for "when" the room should show up - level and rarity. Rooms
# will *never* be generated below the indicated level. You may use * for
# the max_level field if you don't want to indicate a restriction.

# L:<letter>:<Directives>+
# You will use "letters" in the map lines to determine the contents
# of each square in your room. There are a bunch of built-in hard
# coded letters described below, but you might want to add some of
# your own as well. The letter field is required, and must be a single
# character in length. It may override built-in letters if you like.
# Directives guide the feature, monster, trap and object options for the
# square in question. You can specify these directives in any order, separating
# multiple directives with a :. Note: Don't use " as a letter. The parser
# will think you are quoting a string as in MON("fang, farmer maggot's dog", CLONE).
#
# Each directive is of the form NAME[(option_list)] where NAME is one of
# MON, TRAP, OBJ, EGO, ART, or a feature name from f_info.txt (e.g. FLOOR
# or GRANITE). Each directive has its own syntax, which is specified in 
# parentheses. You don't need to specify all directives, just the ones you need.
#   * MON: The MON directive determines the monster for this square.
#          The syntax is MON(<which> [,<options>]) where options are
#          optional, but <which> is required.
#       [1] Which monster? Use * for completely random selection. Or
#           use the display character (from r_info.txt) to limit the
#           kind of monster (e.g. o for orc or Z for zephyr hound). Or
#           enter the name from r_info.txt (like MON(raving lunatic)).
#           You can try a partial match (like MON(lunatic)) but that might
#           not always work.
#           Finally, you can specify one of the various "Summoning Options"
#           to guide monster selection. Look at the code for details, but here
#           are some examples, chosen randomly:
#              - HI_UNDEAD
#              - UNDEAD
#              - AMBERITE
#              - KAMIKAZE
#              - ARMAGE_GOOD  (Armage is probably shorthand for Armageddon ... )
#              - ARMAGE_EVIL
#              - THIEF
#              - HUMAN
#              - UNDEAD_SUMMONER
#              - DEMON_SUMMONER
#              - MAGICAL
#           (As an aside, the various summoning types were already present in the game because
#           either a monster or the player can summon them. This is a numeric code passed to
#           the summon_specific() api. So if the codes seem redundant or useless, just ignore 
#           them. They weren't created for this file).
#       [2] Which Options? The most common option is to generate out of depth monsters,
#           but there are others as well. Separate multiple options with the | character.
#              - NO_GROUP: Suppress normal group code for certain monsters
#              - NO_SLEEP: Monster is always awake
#              - UNIQUE: Allow unique monsters to be chosen.
#              - FRIENDLY: Force monster to be friendly to the player.
#              - HASTE: Monster is generated with extra speed.
#              - DEPTH+NN: Monster is generated up to NN levels out of depth (e.g. DEPTH+40 or DEPTH+7)
#     Sample MON directives and their meaning are:
#       [1] MON(DRAGON, DEPTH+20): Any dragon, up to 20 levels OoD
#       [2] MON(*, DEPTH+40): Any monster, up to 40 levels OoD
#       [3] MON(ORC, NO_GROUP | HASTE): A hasted orc loner
#       [4] MON(o, NO_GROUP | HASTE): A hasted orc loner (The summon type options are sometimes redundant)
#       [5] MON(black knight): A Black Knight
#       [6] MON(*): Anything at all, subject to normal dungeon type or wilderness terrain restrictions.
#
#  * OBJ: The OBJ directive determines the object for this square. Like the MON directive, the
#         syntax is OBJ(<type> [,<subtype>] [,<options>]). Note that you may augment an OBJ directive with
#         an EGO or even ART directive if you wish to generate ego items or artifacts. Both EGO
#         and ART are described separately below.
#       [1] Which Object? You may use * for a randomly chosen object type if you just don't care.
#           Or, you may specify the type of object by name, which is generally the "tval" of the
#           object kind in question. For example, GLOVES refers to TV_GLOVES and HARD_ARMOR refers
#           to TV_HARD_ARMOR. Look at defines.h for all the various tval codes. In addition, there
#           are a small number of custom descriptive codes that span multiple tvals:
#              - DEVICE: This is a rod, wand, staff, scroll or potion.
#              - JEWELRY: A ring or an amulet.
#              - BOOK: Spellbook from a random realm. Each realm has its own tval and there are like 20 of those!
#              - BODY_ARMOR: Includes soft armor, hard armor and even dragon armor.
#              - OTHER_ARMOR: Any armor not included in BODY_ARMOR (e.g., helms, shields, cloaks)
#              - WEAPON: Any melee weapon (there are 4 tvals for weapons).
#              - BOW_AMMO: Any type of bow or ammo.
#              - MISC: Junk, statues, etc. Basically, anything not caught by one of the preceding special categories.
#           Never use a k_idx directly. Instead, use OBJ(POTION, healing) for a potion of healing,
#           or OBJ(SWORD, long sword, DEPTH+20) for an out of depth long sword. k_idx will be
#           removed at some point ...
#       [2] Which Options? Easy. There is only a single option at the moment: DEPTH+NN which says to generate this
#           object up to NN levels out of depth.
#     Sample OBJ directives are:
#       [1] OBJ(*): Any object
#       [2] OBJ(*, DEPTH+7): Any object, up to 7 levels OoD
#       [3] OBJ(POTION, healing): Potion of Healing
#       [4] OBJ(POTION): Any potion
#
#  * EGO: The EGO directive augments the OBJ directive, specifying that an excellent object should be
#         generated. The syntax is EGO(<which>), where which is either * for a random type (appropriate
#         for the object in question or the full name from e_info.txt. You may use the index for
#         the ego type as well, since, at the moment, ego names are often duplicated. In the future
#         I might be able to fix this based on context, but for now, be careful.
#     Sample EGO directives are (Note you generally want an OBJ directive as well):
#       [1] OBJ(RING):EGO(209): Ring of Speed (Note: Boots and Rings both use 'of Speed')
#       [2] OBJ(RING):EGO(*): Any ego ring
#       [3] OBJ(CLOAK, DEPTH+20):EGO(*): Any ego cloak generated up to 20 levels OoD
#       [4] OBJ(SWORD, diamond edge):EGO(pattern)
#
#  * ART: The ART directive augments the OBJ directive, specifying that a special object should be
#         generated. The syntax is ART(<which>) where which is either * for a rand-art or the 
#         numeric index of a standard artifact from a_info.txt.
#     Sample ART directives are:
#       [1] OBJ(CLOAK, DEPTH+20):ART(*): Rand-art cloak generated 20 levels OoD
#       [2] ART(6): Necklace of the Dwarves (a_idx = 6). Note you don't need an OBJ directive in this case.
#
#  * FEATURE: The FEATURE directive determines the terrain type for the floor in question. If omitted, you
#         get a reasonable default value: In the dungeon, this is the FLOOR feature while in the wilderness,
#         your tile will be transparent, using whatever feature info was randomly generated for this tile.
#         The syntax for this directive is <NAME>[(<options>)] where NAME refers to the name field specified
#         in f_info (e.g. FLOOR, MOUNTAIN, SHALLOW_LAVA) and the optional options list can be one or more
#         of ROOM, ICKY, GLOW or MARK. Typically, you won't need to specify options. Also, there is additional
#         syntax for random wilderness dungeon entrances which I've omitted to explain.
#     Sample FEATURE directives are:
#       [1] GRANITE for a granite wall tile
#       [2] FLOOR(ROOM | ICKY | GLOW) for a floor grid that is part of a vault and already lit.
#
#  * TRAP: The TRAP directive allows for placement of a random or specific trap. In addition, the trap
#          can be given a probability of being generated, which is useful for certain room types where
#          the player might learn which squares to avoid (See the various wall opening rooms below for
#          examples. The syntax is TRAP(<name> [,<prob>]) where name is the trap name as given in the
#          name field of the f_info record and prob is an optional probability for this trap (default 100).
#     Sample TRAP directives are:
#       [1] TRAP(TRAP_OPEN, 25%) for a wall opening trap that is generated 25% of the time.
#       [2] TRAP(*) for a random trap that is always generated.
#       [3] TRAP(TRAP_ARMAGEDDON, 50%) for an armageddon trap generated 50% of the time.
#
#  Here are some sample L: lines in their entirety:
#    [1] L:M:SHALLOW_LAVA(ROOM | GLOW):MON(HI_DEMON, NO_GROUP | NO_SLEEP | DEPTH+50):OBJ(*, DEPTH+20):EGO(*)
#        Generates a tile with shallow lava, with a major demon generated up to 50 levels OoD, and with
#        a nice random ego object to boot. The demon is awake and won't come with escorts or friends.
#    [2] L:M:MON(*)
#        Just a random monster here, using whatever terrain info is appropriate.
#    [3] L:0:DIRT(ROOM):MON(THIEF, DEPTH+5):OBJ(GOLD)
#        A thief with some gold underfoot, standing on a dirt floor.
#    [4] L:p:MON(p, NO_GROUP | FRIENDLY)
#        A friendly human that won't come as part of a monster group.
#    [5] L:4:TEMPLE(GLOW)
#        A lit entrance to a temple shop.
#    [6] L:p:DIRT:MON(old sorcerer):OBJ(BOOK, DEPTH+50)
#        An Old Sorcerer standing on a dirt tile with an out of depth good spellbook underfoot.
#
# M:<map_row>
# 'M' lines describe the layout of the room. The size of the room is calculated automatically for
# you. The width of the room is set by the length of the first M: line and checked on each subsequent
# M: line. You must make all lines the same length, padding with spaces as neeed. The height of the
# room is determined by the number of M: lines.
#
# You can use any symbol defined in an L line for this room entry in your map.

L:%:OUTER
L:#:INNER
L:X:INNER_PERM
L:+:SECRET_DOOR
L:':CURTAIN
L:*:TRAP(*, 25%):OBJ(*, DEPTH+1)
L:^:TRAP(*)
L:&:MON(*, DEPTH+5)
L:1:MON(*, DEPTH+3)
L:2:MON(*, DEPTH+5)
L:3:MON(*, DEPTH+9)
L:4:MON(*, DEPTH+11)
L:5:MON(*):OBJ(*, DEPTH+1)
L:6:MON(*, NO_GROUP | DEPTH+5):OBJ(*, DEPTH+5)
L:7:MON(*, NO_GROUP | DEPTH+9):OBJ(*, DEPTH+7)
L:8:MON(*, NO_GROUP | DEPTH+10):OBJ(*, DEPTH+5):EGO(*)
L:9:MON(*, NO_GROUP | DEPTH+15):OBJ(*, DEPTH+20):EGO(*)
L:@:MON(*, DEPTH+11)

%:rooms.txt
%:vaults.txt

######################################################################
# PosChengband Wilderness Encounters
#
# Type:    WILD
# Subtype: cf cell_name (e.g. GRASS, TREE, SHALLOW_LAVA, ... )
#
# The terrain subtype limits where the encounter can occur on the surface.
# For example, lava infested demon swarms make sense in lava terrains, but
# not in the oceans!

####################
# Grass Encounters #
####################
N:Archery Practice
T:WILD:GRASS:FORMATION
W:1:4
L:0:MON(ARCHER)
L:$:OBJ(BOW_AMMO)
M: 2 0 4 
M:2  $  4
M:       
M:0$   $0
M:       
M:4  $  2
M: 4 0 2 

N:Murder
T:WILD:GRASS
W:10:16
L:M:MON(B.crow)
M: M M 
M:M   M
M:  M  
M:M   M
M: M M 

###################
# Lava Encounters #
###################
N:Random Volcano Level
T:WILD:SHALLOW_LAVA:NOTICE
W:40:1
L:>:ENTRANCE(Random Volcano)
L:~:DEEP_LAVA
L:.:SHALLOW_LAVA
L:^:MOUNTAIN
M:  ^^^^^  
M: ^^...^^ 
M:^^..~..^^
M:^..~>~..^
M:^^..~..^^
M: ^^...^^ 
M:  ^^^^^  

N:Demonologist
T:WILD:SHALLOW_LAVA
W:40:16
L:~:DEEP_LAVA
L:U:DEEP_LAVA:MON(BALROG, NO_SLEEP | DEPTH+40)
L:p:DIRT:MON(p.demonologist, NO_SLEEP)
L:.:SHALLOW_LAVA
M:.......
M:..~~~..
M:.~~~~~.
M:~~~U~~~
M:.~~~~~.
M:..~~~..
M:...p...

N:How Vile!
T:WILD:SHALLOW_LAVA
W:20:2
L:u:MON(u.arch-vile)
M:u   u
M:  u  
M:u   u

#######################
# Mountain Encounters #
#######################
N:Eyrie
T:WILD:MOUNTAIN:FORMATION
W:40:4
L:0:MON(B, DEPTH+10)
M:    8     
M:   6 4 3  
M:    2   5 
M:      0  7
M:    8     

N:Random Mountain Level
T:WILD:MOUNTAIN:NOTICE
W:30:16
L:>:ENTRANCE(Random Mountain)
M:>

N:Random Volcano Level
T:WILD:MOUNTAIN:NOTICE
W:40:16
L:>:ENTRANCE(Random Volcano)
L:~:DEEP_LAVA
L:.:SHALLOW_LAVA
L:^:MOUNTAIN
M:  ^^^^^  
M: ^^...^^ 
M:^^..~..^^
M:^..~>~..^
M:^^..~..^^
M: ^^...^^ 
M:  ^^^^^  

####################
# Swamp Encounters #
####################
N:Bat Attack!
T:WILD:SWAMP:FORMATION
W:10:3
L:0:DIRT:MON(b, DEPTH+10)
M:    8     
M:   6 4 3  
M:    2   5 
M:      0  7
M:    8     

N:Ick!
T:WILD:SWAMP:FORMATION
W:10:1
L:0:DIRT:MON(i)
M:    88    
M:   66466  
M:  7743245 
M: 987640357
M:  988992  
M:    99329 

N:Ewwwww!
T:WILD:SWAMP:FORMATION
W:10:2
L:0:DIRT:MON(j, DEPTH+10)
M:    88    
M:   66466  
M:    43245 
M:     40357
M:    89    

#####################
# Forest Encounters #
#####################
N:Spiders
T:WILD:TREE:FORMATION
W:10:2
L:0:MON(S, DEPTH+10)
L:$:OBJ(SKELETON)
M:   8$  4  $8   
M:  8  $232$  8  
M: 8   2$1$2   8 
M:8   4310134   8
M: 8   2$1$2   8 
M:  8  $232$  8  
M:   8$  4  $8   

N:Roasting Hobbits
T:WILD:TREE:NIGHT
W:15:4
L:T:MON(T.forest, NO_SLEEP)
L:h:MON(h.scruffy hobbit, FRIENDLY)
L:~:SHALLOW_LAVA
L:$:OBJ(*)
M:            T
M:   T  $T h   
M:      T~T h T
M:   T   T h   
M:T            

N:Druidic Circle
T:WILD:TREE
W:10:32
L:T:TREE
L:M:GRASS:MON(#.huorn, NO_SLEEP)
L:p:GRASS:MON(p.druid)
L:~:GRASS
M:       TTT       
M:     TTTTTTT     
M:    TTTTTTTTT    
M:   TTTTTpTTTTT   
M:  TTTTTp~pTTTTT  
M: TTTTTp~~~pTTTTT 
M:TTTTTp~~M~~pTTTTT
M:TTTTp~~MMM~~pTTTT
M:TTTTTp~~M~~pTTTTT
M: TTTTTp~~~pTTTTT 
M:  TTTTTp~pTTTTT  
M:   TTTTTpTTTTT   
M:    TTTTTTTTT    
M:     TTTTTTT     
M:       TTT       

N:Treeherder
T:WILD:TREE
W:30:200
L:T:MON(#.ent, FRIENDLY | NO_SLEEP)
M:T

N:Random Forest Level
T:WILD:TREE:NOTICE
W:10:4
L:>:ENTRANCE(Random Forest)
M:>

####################
# Water Encounters #
####################
N:Random Sea Level
T:WILD:DEEP_WATER:NOTICE
W:30:8
L:>:ENTRANCE(Random Sea)
L:~:DEEP_WATER
L:_:SHALLOW_WATER
M:>

# vim: filetype=q :
