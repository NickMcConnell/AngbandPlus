<style:title>The Mogaminator</style>

<color:keyword>The Mogaminator</color> is a rules-based system for automatic object handling, which you can activate or modify with the <color:keypress>_</color> command. With this system, you can decide which objects to pick up, which to destroy, which to automatically identify, and which to display as <color:keyword>wanted</color> in the object list. You can automatically inscribe objects to suit your tastes, and even enter conditional statements to handle the preferences of different races and classes. Or you can just keep the default Mogaminator rules, which already do all of the above!

This document describes this system in tutorial fashion, assuming you know nothing about it. Detailed reference material will appear towards the bottom of this document (see <link:editor.txt#Reference> if you really cannot wait!).

The system is named after its original author, Hengband developer Mogami.

<topic:Review><style:heading>Review of Object Knowledge</style>
There is no doubt about it: the game generates lots and lots of objects. Some are valuable, some are not, and some are only valuable in specific situations... The Mogaminator will help you untangle that mountain of loot.

First, a really quick review of what is explained in detail at <link:objects.txt#Knowledge>. When you find an object, it will generally be <color:keyword>unidentified</color>, but you might have (or soon receive) a rough <color:keyword>sense</color> of the object's quality, called <color:keyword>object feeling</color> or <color:keyword>pseudo-ID</color>. If the object looks promising, you probably want to <color:keyword>identify</color> it to reveal the basics and maybe <color:keyword>*Identify*</color> it to reveal special properties.

So your knowledge of an object is in one of the following states:
  [1] Unsensed
  [2] Sensed (pseudo-identified)
  [3] Identified
  [4] *Identified*

For mushrooms, potions and scrolls, things are a little different; these objects come in <color:keyword>flavors</color>, and once you have learned the flavor, you will immediately recognize all future instances of that object. Indeed, all instances of the object are exactly alike, so the identification game is simply to discover and know the first instance of the object, and then decide, via your pick-up and destroy preferences, what to do with future instances of this type of object.

<topic:ManagingObjects><style:heading>Managing Objects</style>

There are three ways to manage objects: manually, by using the Easy Destroyer (<link:editor.txt#EasyDestroyer> below), and by using the Mogaminator. The Mogaminator is much more powerful than the Easy Destroyer, which simply destroys items, usually junk. <color:y>The Mogaminator and the Easy Destroyer should only be used side-by-side if you have turned the </color><color:keyword>always_pickup</color> <color:y>option on.</color>

What is <color:keyword>the Mogaminator</color>? Basically, it is a rules-based system for taking a given action each time you encounter a certain type of object. The default action is <color:keyword>pick up</color>, and this action is used whenever you fail to specify an alternative action; but the Mogaminator can also destroy junk for you and identify and inscribe objects automatically. Let's discuss the basics.

<topic:BasicUsage><style:heading>Basic Usage</style>

The Mogaminator is activated by pressing <color:keypress>_</color>, which also brings up an in-game editor where you can manage your preferences. It might look like this:
<style:screenshot> <indent>
<color:B>(^Q:Quit, ^W:Save&Quit, ESC:Menu, Other:Input text)</color>         (0,0)               
<color:G>#########################################</color>                                       
<color:G># Consumables</color>                                                                   
<color:G>#########################################</color>                                       
mushroom of restoring<color:U>#!E</color>                                                        
~mushroom of hallucination                                                      
                                                                                
<color:v>?:[EQU $RACE Snotling Doppelganger]</color>                                             
<color:D>~mushroom</color>                                                                       
<color:v>?:1</color>                                                                             
                                                                                
<color:v>?:[LEQ $LEVEL 35]</color>                                                               
<color:R>potions</color>:resist heat and cold<color:U>#!kq</color>                                                
<color:v>?:1</color>                                                                             
<color:R>potions</color>:resistance<color:U>#!kq</color>                                                          
<color:R>potions</color>:stone skin<color:U>#!k</color>                                                           
<color:R>potions</color>:heroism                                                                 
<color:R>potions</color>:speed<color:U>#!kq</color>                                                               
<color:R>potions</color>:giant strength<color:U>#!k</color>                                                       
                                                                                
<color:R>potions</color>:enlightenment                                                           
                                                                                
<color:R>potions</color>:of strength<color:U>#!k</color>                                                          
<color:B>-------------------------------------------------------------------------------</color>
This line is a comment.                                                         
</indent></style>
If you are new, you probably want to run from this complexity as fast as you can. Notice the top line of the screen where it tells you how to get out: <color:keypress>^Q</color> (and you can also exit through the <color:keypress>ESC</color> menu). The desire to exit immediately is understandable, and in fact <color:G>not a problem: simply pressing</color> <color:keypress>_</color> <color:G>turned the Mogaminator on and initialized it with default preferences,</color> so it should do a good job without any further messing. (If you are very lazy, you can stop reading here and just happily play away with the default preferences for the rest of the game!)

<topic:WhatHappened><color:U>So What Happened?</color>

With the Mogaminator now on, you will find much of the junk you encounter being destroyed. For example, all those corpses and skeletons you leave behind as you hack and slash your way through the dungeon... except for <color:keyword>wanted corpses</color>, which are getting automatically picked up!

That's a good start; but you might still run into objects you consider useless. For example, suppose you bought a lantern at the General Store; now you don't really care about torches anymore. Use the <color:keypress>k</color> command (or <color:keypress>^D</color> for the Roguelike keyset) and you get a prompt like:
  Really destroy <color:y>Wooden Torches {unidentified}</color>? <color:y>[y/n/Auto]</color>

Notice the <color:keypress>A</color>uto option. Choose that, and you get a message that the object is destroyed, but the fact that you don't like torches is remembered by the system. The next time your character moves on top of one, it will be destroyed automatically.

That's one simple way to use the Mogaminator: keep registering stuff for automatic destruction as you encounter it, and the loot mountain becomes easier to manage; but as we'll see later, <color:keyword>auto-pickup</color> is even better than auto-destruction.

<topic:CorrectingMistakes><style:heading>Oops, I'm Auto-Destroying Rings of Speed</style>

Ouch! Well, don't panic. You can fix the problem easily; but doing so will require you to go back to the preference file editor. Press <color:keypress>_</color> and then press <color:keypress>END</color> to move to the end of the document. This is where the game keeps track of any objects that you automatically registered for destruction. Your screen might look something like:
<style:screenshot> <indent>
<color:B>(^Q:Quit, ^W:Save&Quit, ESC:Menu, Other:Input text)</color>       <color:y>*</color> (0,268)             
                                                                                
<color:v>?:[EQU $CLASS Tourist]</color>                                                          
<color:D>~photograph</color>                                                                     
<color:v>?:1</color>                                                                             
                                                                                
~<color:G>special </color><color:R>items</color>                                                                  
!<color:G>worthless </color><color:R>items</color>                                                                
<color:G>#!unusable items</color>                                                                
<color:R>?:$AUTOREGISTER</color>                                                                 
<color:R># *Warning!* The lines below will be deleted later.</color>                             
<color:R># Keep them by cut & paste if you need them for future characters.</color>              
<color:R>(!nameless lights:^wooden torch$</color>                                                
<color:B>-------------------------------------------------------------------------------</color>
Destroy all light sources whose name begins with "wooden torch$", and which are 
neither ego-item nor artifact. Do not display as wanted.  This line will be     
deleted later.
</indent></style>
You cannot tell from the picture above, but I placed the cursor on the very last line of the file; in my case, the line from when I registered torches for destruction. Notice that at the very bottom of the screen, the game tells you exactly what the given rule means; if you are curious, you can move the cursor around the default preference file and actually learn quite a bit about how the system works. If you wish to simply remove this (or any other) rule, just delete the corresponding line and then exit with <color:keypress>^W</color> to save and apply your changes.

<topic:WantedObjects><style:heading>What About Stuff I Want?</style>

What you don't want is only half the story; some objects you really like. The two work nicely together, since <color:keyword>interesting objects</color> will appear at the top of the <color:keypress>]</color> object list. This allows you to easily track the interesting stuff even if the junk has not been destroyed!

Suppose you want potions of Cure Critical Wounds (this is a random but reasonable example of an item not set to be picked up by default). Wouldn't it be nice if these potions were automatically picked up, as well as displayed near the top of the object list? This is accomplished by adding the following line to the <color:keyword>top</color> of the preferences file:
<style:screenshot> <indent>
<color:B>(^Q:Quit, ^W:Save&Quit, ESC:Menu, Other:Input text)</color>       <color:y>*</color> (0,0)               
<color:y>cure critical wounds</color>
<color:G>#########################################</color>                                       
<color:G># Consumables</color>                                                                   
<color:G>#########################################</color>                                       
mushroom of restoring<color:U>#!E</color>                                                        
~mushroom of hallucination                                                      
                                                                                
<color:v>?:[EQU $RACE Snotling Doppelganger]</color>                                             
<color:D>~mushroom</color>                                                                       
<color:v>?:1</color>                                                                             
<color:B>--------------------------------------------------------------------------------</color>
Pick up all items which have "cure critical wounds" as part of their name.
Display these items as wanted in object list.
</indent></style>
I colored the new line <color:y>yellow</color> in the screenshot to make it stand out. Pay attention to the bottom of the screen: does it sound like it will work? The reason I had to put the new line at the top is that <color:G>rules are processed in order of priority from top to bottom</color>; so if I placed the new rule at the bottom, it might have been overridden by an earlier rule.

Now, let's press <color:keypress>]</color> to activate the Object List - is there anything on this level that I want?
<style:screenshot>
There are 4 wanted objects:                                         LEVEL <color:G>     1</color>
 <color:r>!</color> <color:B>4 Potions of Cure Critical Wounds   </color> S  4 E 16                   EXP <color:G>       3</color>
                                                                    AU  <color:G>     747</color>
There are 4 other objects:                                          <color:W>|</color><color:d>      </color><color:y>!</color><color:U>(</color><color:d>   </color>
 <color:u>~</color> <color:y>4 Wooden Torches {unidentified}     </color> N  3 E 17                   STR : <color:G>    16</color>
   <color:B>[Press ESC to exit. Press ? for help]</color>                            INT : <color:G>    18</color>
><color:s>.....</color>#<color:U>+</color>#<color:s>.</color>%%                                                        WIS : <color:G>     9</color>
%%%%<color:s>.</color>%<color:s>%.</color>#<color:s>.</color>%                         ##<color:s>..</color>                            DEX : <color:G> 18/40</color>
   <color:s>%</color><color:U>'</color>%<color:s>....</color>#                        #<color:s>%....</color>                           CON : <color:G>    17</color>
  <color:s>%</color>%<color:s>......</color>%                       <color:s>%%.</color><color:u>~</color><color:s>..%</color>                           CHR : <color:G>    12</color>
 #<color:s>%......</color><color:U>+</color>%         <color:s>%%</color>%          <color:s>%</color>#<color:s>....%%..</color>                         AC     <color:G>    6</color>
%#........%<color:s>%</color>%%%<color:s>%</color>%%<color:s>%</color>#<color:s>%</color>.%<color:s>%</color>        ##<color:s>..........</color>                        HP <color:G>  37</color>/<color:G>  37</color>
%.........<color:U>'</color><color:s>.</color><color:U>'</color><color:s>....</color>...<color:y>@</color>..#<color:s>%</color>      #<color:s>%..........</color>#                        SP <color:G>  14</color>/<color:G>  14</color>
%<color:s>%</color>%......%%%%%%<color:s>%%%%%</color>#<color:o>*</color><color:U>'</color>.###<color:s>%</color>% #<color:s>%....</color>##<color:s>....</color><color:o>*</color>                                     
<color:s>..</color><color:U>'</color><color:s>.......</color>#       %<color:s>.......%..</color>#<color:s>%....%%....</color>#<color:s>%</color>                                     
%<color:s>%</color>##<color:s>......%</color>       <color:s>%........%%%....</color>##<color:s>....</color>##                                      
   <color:s>%.....%</color>#       %<color:s>.......</color><color:u>'</color><color:s>......</color>#<color:s>%.</color><color:r>!</color><color:s>..%%</color>                                       
   <color:s>%.</color>#<color:s>...%</color>        #<color:s>.......</color>#<color:s>%%</color>###########                                        
   <color:s>%%%</color>%#%%        #<color:s>.......</color>#                                                     
</style>
Bingo! You can even <color:keyword>automatically travel</color> to those delicious potions by pressing <color:keypress>J</color> inside the Object List. What could be easier?

To recap, adding the line "cure critical wounds" tells the Mogaminator to pick up any object that has "cure critical wounds" as part of its name. You don't have to type so much - "crit" might work just as well - but the less you type, the more likely it is that your new rule will also match other objects. For example, "cure" would match potions of Cure Light Wounds, Cure Serious Wounds and Cure Critical Wounds, and even Staves of Cure Wounds. Sometimes this is OK, but at other times, it is better to type more.

<topic:IntroRulesEvents><style:heading>Introduction to Rules and Events</style>

So how does all this work? Basically, the preference file is an ordered list of rules. Whenever a certain event happens (such as moving on top of an object), the rules are scanned <color:v>from top to bottom</color>, and the first one that matches (if any) is applied. Every rule has an action associated with it that determines what to do if the rule applies.

Each rule is a single line in the file; but not every line is a rule. Some lines are blank, some are comments, and some are conditionals that tell the game when to ignore rules.

Objects are tested against rules whenever a specific event happens; generally when the player (1) moves on top of an object, (2) gets a new object feeling (see <link:option.txt#destroy_feeling>) or (3) identifies an object (see <link:option.txt#destroy_identify>).

<topic:Rules><style:heading>Rules</style>

A rule is a single line that consists of an action to perform, a predicate to test matches, and an optional inscription to add. Let's discuss each of these in turn.

  <indent><color:o>Actions</color>

First of all, picking something up is the default action and is inferred whenever you fail to specify an alternative. What are the alternatives?

<color:keypress>!</color>  Destroy
<color:keypress>;</color>  Prompt to pick up
<color:keypress>~</color>  Leave on the floor

These are the primary actions. Pick-up is assumed if the rule does not begin with <color:keypress>!</color>, <color:keypress>;</color> or <color:keypress>~</color>.

In addition, there are the following action letters that augment the primary action:

<color:keypress>(</color>  Don't display this item on the <color:keypress>M</color> map
<color:keypress>?</color>  Automatically identify this item

The first of these is not commonly used, since the <color:keypress>M</color> map item display has been completely obsoleted by improvements to the object list. The second option (<color:keypress>?</color>) is very useful, though, since it automatically identifies the matching object. This is a great time-saver, but requires you to carry Scrolls or Staves of Identify.

All of the action letters must be specified <color:keyword>first</color> in the line for the rule, with one exception. The <color:keypress>#</color> letter indicates that you wish to automatically inscribe matching objects, and it must occur at the <color:keyword>end</color> of the rule, followed only by the inscription text itself. For example, <color:U>#@ad!sdk</color> at the end of a rule will automatically inscribe <color:R>@ad!sdk</color> to any object matching the rule. (See <link:objects.txt#Inscriptions> for an explanation of this inscription!)
</indent>
  <indent><color:o>Matching</color>
We saw above that matching is by string comparison with the object name, but you can be more specific than that if you want. To do so, use the following <color:keyword>keywords</color> to construct a predicate used to test objects. The keyword portion of the match consists of zero or more adjectives modifying a noun that indicates the broad class of objects which should be considered. In addition, you can specify a free form text comparison string by adjoining <color:keypress>:</color> followed by text to search for. We'll put all of this together in the examples section below.

Let's do nouns first. A complete list is presented at the end of this document, but some common nouns to get us started include:

<color:R>Items</color>     <indent>Applies to everything. This is useful for very general rules, such as ~?<color:G>unidentified</color> <color:R>items</color> to automatically identify, but leave on the ground, everything not yet identified; or even <color:keyword>items</color> to pick everything up!</indent>
<color:R>Weapons</color>   <indent>Applies to all melee weapons, but not to ranged weapons.</indent>
<color:R>Shooters</color>  <indent>Applies to all missile weapons, including bows, slings and crossbows.</indent>
<color:R>Armors</color>    <indent>Applies to all forms of armor, including shields, helms and cloaks as well as body armor.</indent>
<color:R>Wands</color>     Applies to magical devices that are wands
<color:R>Staves</color>    Applies to magical devices that are staves
<color:R>Rods</color>      Applies to magical devices that are rods
<color:R>Potions</color>   Applies to potions
<color:R>Scrolls</color>   Applies to scrolls

If you are using keywords to build a match predicate, then you must specify exactly one noun, but may use as many adjectives as you like. The complete list of adjectives is given below at <link:editor.txt#Adjectives>, but here are some of the more common ones:

<color:G>Unaware</color>      <indent>Applies to objects whose flavor has not yet been identified.</indent>
<color:G>Unidentified</color> <indent>Applies to any objects that have not yet been identified.</indent>
<color:G>Unsensed</color>     <indent>Applies to objects that have not been identified or pseudo-identified.</indent>
<color:G>Ego</color>          <indent>Applies to all excellent objects.</indent>
<color:G>Nameless</color>     <indent>Applies to all non-ego, non-artifact objects.</indent>
<color:G>Wanted</color>       <indent>Applies to corpses and skeletons of wanted monsters. These may be turned in at the Hunter's Office for a prize.</indent>

As an example of using multiple adjectives, the phrase ?<color:G>unidentified ego</color> <color:R>weapons</color> applies to, well, all melee weapons that are both excellent and not yet identified. Of course this means you must have pseudo-identified the object to know that it is an ego.

Finally, use a search string to further refine the match. If you don't use any adjective or noun keywords, then the entire text of your rule (starting after any action letters, and including all text up to the <color:keypress>#</color> inscription character) is used as the search string. If you are using keywords, mark the end of the keyword section with the <color:keypress>:</color> separator. Examples are discussed below.
</indent>
  <indent><color:o>Examples</color>

!<color:R>potions</color>:apple juice
  <indent>Destroy potions of apple juice (as refreshing as they might be!). It uses the <color:keypress>!</color> action letter for destruction, the <color:keyword>potions</color> keyword to apply to an entire class of objects, the <color:keypress>:</color> separator key, and a text field for string matching against the object name.</indent>

?<color:G>unaware </color><color:R>items</color>
  <indent>Pick up and automatically identify unidentified flavored items (e.g. a potion you've never seen before). Note that the pickup action is implied since none of the other primary actions are indicated, and even though there is a secondary action (to auto-id). This command uses the adjective <color:G>unaware</color> to modify the noun <color:R>items</color>. You could narrow down the applicability of this rule by using a more specific noun, such as <color:R>scrolls</color> or <color:R>potions</color>.</indent>

<color:G>wanted </color><color:R>corpses</color><color:U>#Wanted!kkk</color>
  <indent>Pick up wanted corpses, and automatically inscribe them with <color:U>Wanted!kkk</color>. This inscription may make it sound like the monster was wanted for racism, but it simply means you get prompted repeatedly if you accidentally try to destroy the corpse. (See <link:objects.txt#Inscriptions> for more on how inscriptions work.)</indent>

?<color:R>staves</color>:destruction<color:U>#@ud!sdk</color>
  <indent>Pick up and automatically identify all staves whose name contains the string "destruction". Inscribe these objects with <color:U>@ud!sdk</color>.</indent>
</indent>

<topic:Scenarios><style:heading>Example Scenarios</style>

After that last section, you should have complete mastery over individual rules. Now, it is time to step up one level and apply multiple rules to accomplish common tasks. Ready?

  <indent><color:B>Scenario #1</color>: Handling Objects

In this scenario, you would like to handle the stream of objects in the most efficient way possible. Let's begin with the following rules:
  <color:G>unsensed </color><color:R>armors</color>
  <color:G>unsensed </color><color:R>weapons</color>

These rules say to pick up all armor and weapons not yet sensed or identified. That leaves out many types of objects, like potions and scrolls, but at least weapons and armors are objects that can be sensed. Since objects need to be in your pack to be sensed (we know immediate floor-pseudo-ID didn't kick in because the objects matched the <color:G>unsensed</color> adjective!), it is convenient to pick them up.

Now, let's add the following rules:
  !<color:G>average common </color><color:R>weapons</color>
  !<color:G>average common </color><color:R>armors</color>

You might not actually want this; but for now, assume your character is advanced enough to view average common equipment as junk. These rules will fire once pseudo-ID kicks in, destroying weapons and armor that pseudo-ID as average. The <color:G>common</color> adjective prevents these rules from applying to rare average items, like dragon scale mail or blades of chaos.

So, now our character is merrily picking up all equipment and then auto-destroying the average stuff once pseudo-id kicks in. Can we do more? Well, try adding:
  ?<color:G>unidentified ego </color><color:R>items</color>

Now, the egos are automatically being identified on pseudo-ID as well. Pretty sweet! But maybe you get tired of some ego types after a while, and want them registered for destruction:

  !<color:G>common ego </color><color:R>cloaks</color>:of protection
  !<color:G>common ego </color><color:R>weapons</color>:of sharpness

Now even boring excellent items are being toasted for you, automatically, with nary a keystroke on your part; but, sometimes swords of sharpness become dice-boosted, and might not be so boring after all. You can protect them with
  <color:G>dice boosted </color><color:R>weapons</color>
or perhaps even
  <color:R>weapons</color><color:o> more dice than 30</color>
though that last one is an advanced maneuver.

In summary, the complete order of your rules might be:
  <color:R>weapons</color><color:o> more dice than 30</color>
  ?<color:G>unidentified ego </color><color:R>items</color>

  !<color:G>average common </color><color:R>weapons</color>
  !<color:G>average common </color><color:R>armors</color>

  <color:G>unidentified </color><color:R>armors</color>
  <color:G>unidentified </color><color:R>weapons</color>

  !<color:G>common ego </color><color:R>cloaks</color>:of protection
  !<color:G>common ego </color><color:R>weapons</color>:of sharpness

New armors and weapons come down and hit rule 5 or 6 when your character steps on them, so they get placed into your pack automatically. Eventually pseudo-ID will kick in, revealing the object as average, in which case it is destroyed by rule 3 or rule 4, or as excellent, in which case it is processed by rule 2 which auto-identifies the ego item and rescans the rules. If it is a cloak of protection, it is destroyed by rule 7, while if it is a weapon of sharpness, it is destroyed by rule 8 - unless it happened to be hugely dice boosted, in which case it is protected by top-priority rule 1. Easy, right? Now you only have {bad} and {good} and {special} equipment to worry about...
</indent>
  <indent><color:B>Scenario #2</color>: Flavored Objects
This one is easier, and I'll give the full set of rules first:
  <color:R>potions</color>:healing<color:U>#!kq</color>
  <color:R>potions</color>:of strength<color:U>#!k</color>
  <color:R>potions</color>:of intelligence<color:U>#!k</color>
  <color:R>potions</color>:of wisdom<color:U>#!k</color>
  <color:R>potions</color>:of dexterity<color:U>#!k</color>
  <color:R>potions</color>:of constitution<color:U>#!k</color>
  <color:R>potions</color>:of charisma<color:U>#!k</color>
  <color:R>potions</color>:augmentation<color:U>#!k</color>

  <color:R>scrolls</color>:artifact creation<color:U>#!*</color>
  ...

  ?<color:G>unaware </color><color:R>items</color>

  <color:G>collecting </color><color:R>potions</color>
  <color:G>collecting </color><color:R>scrolls</color>

  <color:R>?:$AUTOREGISTER</color>
  ...
  (!<color:R>potions</color>:^potion of restore charisma$
  (!<color:R>scrolls</color>:^scroll of treasure detection$
  ... <many more junk flavors auto-registered for destruction> ...

Now, the pattern is wanted flavors on top for autopickup (and inscription), unwanted flavors on bottom for autodestruction (these are placed in your file automatically each time you press <color:keypress>A</color> while destroying an object) and rules for collecting and unaware items in the middle. Unaware items get automatically identified, at which point one of the pick-up or destroy rules might get a chance to act. As for the <color:G>collecting</color> rules, those fire if you have another object of the same flavor in your pack. Perhaps you are carrying potions of Cure Critical Wounds, but don't have a rule specifically for this flavor; in this case, the collecting rule will pick up other potions of Cure Critical Wounds for you.
</indent>
  <indent><color:B>Scenario #3</color>: Spellbooks
OK, this is the last one. See if you can figure this one out first:
  <color:G>first realm's fourth </color><color:R>spellbooks</color><color:U>#@md!sdk</color>
  <color:G>first realm's third </color><color:R>spellbooks</color><color:U>#@mc!sdk</color>
  ~<color:G>first realm's second </color><color:R>spellbooks</color><color:U>#@mb!k</color>
  ~<color:G>first realm's first </color><color:R>spellbooks</color><color:U>#@ma!k</color>
  <color:G>second realm's fourth </color><color:R>spellbooks</color><color:U>#@mh!sdk</color>
  <color:G>second realm's third </color><color:R>spellbooks</color><color:U>#@mg!sdk</color>
  ~<color:G>second realm's second </color><color:R>spellbooks</color><color:U>#@mf!k</color>
  ~<color:G>second realm's first </color><color:R>spellbooks</color><color:U>#@me!k</color>
  !<color:G>first </color><color:R>spellbooks</color>
  !<color:G>second </color><color:R>spellbooks</color>
  !<color:G>third </color><color:R>spellbooks</color>:major arcana
  !<color:G>fourth </color><color:R>spellbooks</color>:manual of mastery
  <color:G>third </color><color:R>spellbooks</color>
  <color:G>fourth </color><color:R>spellbooks</color>
Did you figure it out? This scenario picks up high level spellbooks from your character's magic realms, leaves low level spellbooks from your realms, destroys all other low level spellbooks, destroys all arcane magic spellbooks, but picks up high level spellbooks from other realms (presumably to sell for gold). Spellbooks from your realms are auto-inscribed to keep book labels consistent. Here, as elsewhere, order is very important: rules for the character's spell realms must come before the general rules to destroy low level spellbooks. (There is an <color:G>unreadable</color> adjective that would have made processing safer and less order-dependent here.)
</indent>
<topic:WhichRule><style:heading>Which Rule is Being Used?</style>

If you are ever unsure about which rule is being applied in a given situation, turn on the <color:keyword>destroy_debug</color> option (see <link:option.txt#destroy_debug>). With this option you can use the <color:keypress>I</color>nspect command for more information. For example:
<style:screenshot>
  <color:u>a Thieves' Guide [Burglar's Handbook]</color>

    <color:r>Autopick:</color> (!<color:G>unreadable first </color><color:R>spellbooks</color>
</style>
I may or may not like this behavior, and if I don't, now I know which line to change!

In addition, with debugging turned on, the rules used are printed in the message log as actions are taken, so you can see exactly why objects are being destroyed, picked up, left on the ground or auto-identified. For example:
<style:screenshot>
  <indent>You have 26 charges remaining. <color:B>(AutoID</color><color:B>:</color>~?<color:G>unidentified </color><color:R>rods</color><color:B>)</color> You see <color:v>a </color>
<color:v>Rod: </color><color:W>Frost Ball</color><color:v> (</color><color:y>1/3 charges</color><color:v>)</color>. <color:B>(Destroy:</color>(!<color:R>rods</color>:frost ball$<color:B>)</color>
Auto-destroying.</indent>
</style>
Since this is message spam, you probably don't want to leave the <color:keyword>destroy_debug</color> option permanently on.

<topic:Conditionals><style:heading>Conditionals</style>

This is an advanced topic, but the underlying principles are simple. What you consider useful or junk may depend on your race, class, character level or other similar details; and <color:keyword>conditionals</color> help you apply rules only when they are appropriate. Each conditional statement evaluates as either <color:keyword>TRUE</color> (1) or <color:keyword>FALSE</color> (0); if a conditional that evaluates as FALSE is encountered, all rules that follow it are ignored until the next TRUE conditional is reached.

Conditional lines always begin with the characters <color:keyword>?:</color>, followed by a (rather cryptic looking) expression that the game will evaluate.

Let's look at an example. Remember <color:B>Scenario #1</color> above when we added lines to destroy average equipment? I said you might not actually want them, unless your character was advanced enough. Suppose you consider level 20 advanced enough?
  <color:v>?:[GEQ $LEVEL 20]</color>
  !<color:G>average common </color><color:R>weapons</color>
  !<color:G>average common </color><color:R>armors</color>
  <color:v>?:1</color>

Notice there are two lines colored in <color:v>violet</color>, each beginning with <color:keyword>?:</color>. These are the conditionals; the first includes a funny-looking expression while the second one is much simpler, just <color:v>?:1</color>.

The first conditional might or might not evaluate as TRUE; it depends on the value of $LEVEL (which you probably guessed is your current character level) and whether or not it is >= 20. GEQ stands for <color:keyword>greater than or equal to</color>, and 20 is just a number. The order ([GEQ $LEVEL 20] instead of, say, $LEVEL GEQ 20 or even $LEVEL >= 20) is because GEQ is this expression's <color:keyword>function</color>, and $LEVEL and 20 are arguments for it.

In contrast, <color:v>?:1</color> is easy. It evaluates as... well, 1! And as we already noted, 1 means TRUE; so <color:v>?:1</color> flips the "ignore rules" switch back off, and effectively marks the end of the area to which the previous conditional applies.

Here's another example:
<style:wide>  <color:v>?:[OR [EQU $CLASS Mage High-Mage Sorcerer] [EQU $RACE Beholder Lich] ]</color>
  wizardstaff
  <color:v>?:1</color></style>

That's a more complicated expression, but you can probably figure it out: it's TRUE if your class is either a Mage, High-Mage or a Sorcerer; <color:v>or</color> if your race is either a Beholder or a Lich.

So, we have expressions composed of functions (like GEQ and OR), variables (like $RACE and $LEVEL), literals (like Mage and Sorcerer) and brackets. What are the functions and variables we can use?

<color:G>Function    Explanation</color>
  <color:keyword>IOR</color>       <indent>Inclusive Or: [IOR a b c ...] is TRUE if the value of <color:o>any</color> subexpression a, b, c, ... is TRUE.</indent>
  <color:keyword>OR</color>        <indent>Same as IOR. (If you are a programmer or a mathematician you might expect there to be a XOR function, but there isn't!)</indent>
  <color:keyword>AND</color>       <indent>Logical And: [AND a b c ...] is TRUE if the values of <color:o>all</color> subexpressions a, b, c, ... are TRUE.</indent>
  <color:keyword>NOT</color>       <indent>[NOT a] is TRUE if a is FALSE, and vice versa. Use this when you want to take an action when something is <color:o>not</color> true.</indent>
  <color:keyword>EQU</color>       <indent>[EQU v a b c ...] is TRUE when the value of v is <color:o>one</color> of the values a, b, c, ... Comparison is by string. Typically, you use this with v being a built-in variable expression like <color:keyword>$CLASS</color> (see below), and the remaining arguments being strings to test like <color:keyword>Mage</color> or <color:keyword>Sorcerer</color>. Note that string literals are not quoted and therefore may not contain spaces. Hyphenate names with spaces (<color:keyword>Filthy-Rag</color> instead of <color:keyword>Filthy Rag</color>) if necessary.</indent>
  <color:keyword>LEQ</color>       <indent>[LEQ v a] is TRUE when the integer value of v is <color:o>less than or equal to</color> the integer value of a. Note that while EQU treats its arguments as strings, LEQ treats them as numbers.</indent>
  <color:keyword>GEQ</color>       <indent>[GEQ v a] is TRUE when the integer value of v is <color:o>greater than or equal to</color> the integer value of a. Note that while EQU treats its arguments as strings, GEQ treats them as numbers.</indent>

<color:G>Variable    Explanation</color>
<color:keyword>$RACE</color>       <indent>Returns the name of your race; for example, <color:keyword>Snotling</color> or <color:keyword>High-Elf</color>.</indent>
<color:keyword>$CLASS</color>      <indent>Returns the name of your class; for example, <color:keyword>Warrior-Mage</color> or <color:keyword>Mindcrafter</color>. Note that if you are playing in <color:r>Monster</color> mode, then this variable always returns <color:keyword>Monster</color>, while $RACE returns the actual monster race you are playing, such as <color:keyword>Lich</color> or <color:keyword>Dragon</color>.</indent>
<color:keyword>$SUBCLASS</color>   <indent>Returns the name of your subclass, if any. This could be, say, <color:keyword>Yeqrezh</color> on a Disciple or <color:keyword>Evil Bias</color> on a Gray-Mage.</indent>
<color:keyword>$SPECIALITY</color> <indent>Returns the name of your speciality, for example <color:keyword>Axes</color> on a Weaponmaster or <color:keyword>Potions</color> on a Devicemaster. Returns <color:keyword>none</color> for all classes except those two.</indent>
<color:keyword>$REALM1</color>     <indent>Returns the name of your first realm, if any; for example, <color:keyword>Chaos</color> or <color:keyword>Sorcery</color>. If the player does not have a first realm, then this variable returns <color:keyword>none</color>.</indent>
<color:keyword>$REALM2</color>     <indent>Returns the name of your second realm, if any; for example, <color:keyword>Life</color> or <color:keyword>Death</color>. If the player does not have a second realm, then this variable returns <color:keyword>none</color>.</indent>
<color:keyword>$LEVEL</color>      <indent>Returns your current level. Typically, you combine this with GEQ or LEQ to test the level against a threshold, such as <color:v>[LEQ $LEVEL 34]</color>.</indent>
<color:keyword>$SELLING</color>    <indent>Returns <color:keyword>Off</color> if you have turned the <color:keyword>no_selling</color> option on, and <color:keyword>On</color> otherwise.</indent>
<color:keyword>$MONEY</color>      <indent>Returns the amount of gold the player has. Like $LEVEL, use this with GEQ or LEQ to test whether your player is rich or poor.</indent>

All variables begin with a <color:keypress>$</color> character to distinguish them from string literals.

<color:G>Literal     Explanation</color>
<color:keyword>Number</color>      <indent>Numbers are written like <color:keyword>105</color> or <color:keyword>32</color>.</indent>
<color:keyword>String</color>      <indent>Strings are written like <color:keyword>High-Mage</color> or <color:keyword>Beholder</color>, and may not contain spaces.</indent>

<topic:Editor><style:heading>Using the Editor</style>

The editor should not be too hard to use, and you can probably figure things out on your own. Like any text editor, you move the cursor about with the arrow keys and then type when you have located the correct position. Advanced things (and easy things that slip your mind) can be done through the <color:keypress>ESC</color> menu:
<style:screenshot> <indent>
<color:B>(a-j) Command:</color>                                                                  
<color:G>#####</color><color:b>+---------------------------+</color><color:G>#######</color>                                       
<color:G># Con</color><color:b>|</color><color:B> a) Help                   </color><color:b>|</color>                                              
<color:G>#####</color><color:b>|</color><color:B> b) Quit without save   ^Q </color><color:b>|</color><color:G>#######</color>                                       
mushr<color:b>|</color><color:B> c) Sa</color><color:b>+----------------------------------+</color>                                
~mush<color:b>|</color><color:B> d) Re</color><color:b>|</color><color:B> a) Left     (Left Arrow key)  ^B </color><color:b>|</color>                                
     <color:b>|</color><color:B> e) Lo</color><color:b>|</color><color:B> b) Down     (Down Arrow key)  ^N </color><color:b>|</color>                                
<color:v>?:[EQ</color><color:b>|</color><color:B> f) Ed</color><color:b>|</color><color:B> c) Up       (Up Arrow key)    ^P </color><color:b>|</color>                                
<color:D>~mush</color><color:b>|</color><color:B> g) Se</color><color:b>|</color><color:B> d) Right    (Right Arrow key) ^F </color><color:b>|</color>                                
<color:v>?:1</color>  <color:b>|</color><color:B> h) Mo</color><color:b>|</color><color:B> e) Beginning of line          ^A </color><color:b>|</color>                                
     <color:b>|</color><color:B> i) In</color><color:b>|</color><color:B> f) End of line                ^E </color><color:b>|</color>                                
<color:v>?:[LE</color><color:b>|</color><color:B> j) Ad</color><color:b>|</color><color:B> g) Page up  (PageUp key)      ^O </color><color:b>|</color>                                
<color:D>potio</color><color:b>|</color><color:B> k) Ad</color><color:b>|</color><color:B> h) Page down(PageDown key)    ^L </color><color:b>|</color>                                
<color:v>?:1</color>  <color:b>|</color><color:B> l) Ke</color><color:b>|</color><color:B> i) Top      (Home key)        ^T </color><color:b>|</color>                                
<color:R>potio</color><color:b>|</color><color:B> m) Co</color><color:b>|</color><color:B> j) Bottom   (End key)         ^U </color><color:b>|</color>                                
<color:R>potio</color><color:b>+------+----------------------------------+</color>                                
<color:R>potions</color>:heroism                                                                 
<color:R>potions</color>:speed<color:U>#!kq</color>                                                               
<color:R>potions</color>:giant strength<color:U>#!k</color>                                                       
                                                                                
<color:R>potions</color>:enlightenment                                                           
                                                                                
<color:R>potions</color>:of strength<color:U>#!k</color>                                                          
<color:B>--------------------------------------------------------------------------------</color>
This line is a comment.                                                         
</indent></style>
Here, you can clearly see what commands to use to move the cursor about, as well as backup keys in case normal keys like arrows somehow fail.

Note that the editor automatically colors each rule line according to the syntax of the expression. Sometimes the text displayed is not exactly the same as the rule you actually typed in (adjectives might be shuffled, for instance); but the meaning will be the same. To avoid confusion, the line your cursor is on is never syntax-colored and always displays exactly what you typed.

<topic:EasyDestroyer><style:heading>The Easy Destroyer</style>

If, after reading all of the above, you decide that the Mogaminator is too much for you to handle, you may instead use a simpler system to manage objects: the <color:keyword>Easy Destroyer</color>. This system is configured via options (see <link:option.txt#AutoDestroyer>); the option <color:keyword>destroy_items</color> turns the Easy Destroyer on and off. Using the Mogaminator and the Easy Destroyer side-by-side is recommended <color:v>if and only if</color> you have the <color:keyword>always_pickup</color> option on.

If you have turned on the Mogaminator but don't like what it's doing, you can use the <color:keyword>no_mogaminator</color> option to turn it off, or the <color:keyword>leave_mogaminator</color> option to limit object destruction to complete junk only. Using <color:keyword>always_pickup</color> also disables item destruction by the Mogaminator while still allowing the Easy Destroyer.

<topic:Reference><style:heading>Reference Tables</style>

This section will give all the nitty-gritty syntax details for the Mogaminator. But first, where are those preference files located anyway? The default preferences are initialized from lib/pref/pickpref.prf; so if you want to edit the default preferences for all characters, this is the file to edit. You can also create your own personal default preferences at /lib/user/pickpref-UserDefault.prf; this has the advantage that you don't need to overwrite the original defaults, and can go back to them easily if you start disliking your changes. (Another advantage of the user defaults is that you can set and edit them in-game, which you cannot do with the global defaults.)

Once you activate the Mogaminator, your preferences are stored in a separate file in a system-dependent location. On Windows, they will be stored at lib/user/pickpref-<color:o>NAME</color>.prf, while on Linux they might be moved to ~/.angband/FrogComposband/pickpref-<color:o>NAME</color>.prf (outside the game's directory structure). Here, <color:o>NAME</color> is replaced with your player's current name. So if you want to edit your character's preferences using an outside text editor, this is the file you need to change. It's usually simpler to just use the in-game editor; but if you do edit preferences outside the game while you are playing, be sure to use the <color:keypress>$</color> command to force the game to reload the preference file.

The promised reference tables follow below... enjoy!

<topic:LineTypes><color:B>Table I: Line Types in the Editor</color>
  <indent><color:G>Type        Explanation</color>
<color:keyword>Comment</color>     <indent>These lines begin with a <color:keypress>#</color> and are ignored by the system.</indent>

<color:keyword>Conditional</color> <indent>These lines flip the global processing switch ON and OFF. If the expression evaluates to TRUE, then the switch is turned ON and any subsequent rules will be included. If the expression evaluates to FALSE, the switch is turned OFF and any subsequent rules will be ignored until the next TRUE conditional is reached. See <link:editor.txt#Conditionals> above for details.</indent>

<color:keyword>Rule</color>        <indent>Every other line, unless it is blank, is a rule. The syntax of a rule is described in the following 5 tables.</indent>
</indent>
<topic:RuleSyntax><color:B>Table II: Rules: Syntax</color>
  <indent>Rules have one of the following two syntactic forms:
<style:wide><style:indent><color:y>[</color>Actions<color:y>]</color> <color:G>Adjectives</color><color:y>*</color> <color:R>Noun</color> <color:o>Special-Clauses</color><color:y>*</color> <color:y>[</color><color:keypress>:</color>Search-String<color:y>]</color> <color:y>[</color><color:U>#Inscription-String</color><color:y>]</color></style></style>

<color:y>[</color>Actions<color:y>]</color> Search-String <color:y>[</color><color:U>#Inscription-String</color><color:y>]</color>

Square brackets denote optional syntactic elements. <color:y>*</color> is the Kleene-Star and indicates that 0 or more of the preceding syntactic elements may be specified. All rules must be specified on a single line in your preference file.

<color:G>Syntactic Element  Explanation</color>
Actions            <indent>The "what to do if this rule matches" part. Uses one or more of the action letters described in the next table. If this element is omitted, the action defaults to <color:keyword>pick up</color>.</indent>

<color:G>Adjectives</color>         <indent>These modify nouns, further narrowing down the set of objects that will match the rule.</indent>

<color:R>Noun</color>               <indent>A single noun is always specified for the first syntactic form and indicates the broad class of objects to which this rule shall apply.</indent>

<color:o>Special Clauses</color>    <indent>Further refinements, discussed below (<link:editor.txt#SpecialClauses>). They resemble adjectives in that they modify nouns, but unlike adjectives they involve numerical comparison of object attributes. They also always follow the noun, while adjectives precede the noun.</indent>

Search String      <indent>This is a free-form text value to compare against the object's name. Comparison is by string and is case-insensitive. Two special characters, <color:keypress>^</color> and <color:keypress>$</color>, indicate the matching string must be at the beginning or end (respectively) of the object's name; for example, <color:keyword>^foo</color> will only match objects whose names begin with <color:keyword>foo</color>, so <color:keyword>foobar</color> matches it but <color:keyword>barfoo</color> does not. Similarly, <color:keyword>bar$</color> only matches objects whose name <color:keywords>ends</color> with <color:keyword>bar</color>. Finally, note that object names are always in the singular; so, for example, <color:keyword>Seeker Bolt</color> would work for a string match, but <color:keyword>Seeker Bolts</color> would always fail.</indent>

<color:U>Inscription String</color> <indent>This is a free-form text value that will be automatically inscribed on any object matching this rule.</indent>

If this seems complicated, study the default preferences and you will soon figure things out.
</indent>
<topic:CommandLetters><color:B>Table III: Rules: Action Letters</color>
  <indent><color:G>Letter  Type       Explanation</color>
  <color:keypress>!</color>     Primary    Destroy
  <color:keypress>;</color>     Primary    Prompt to pick up
  <color:keypress>~</color>     Primary    Leave on the floor
        Primary    <indent>Pick up - assumed if you fail to provide an alternative primary action letter. There is no specific action letter for this action, it is simply assumed unless overridden.</indent>
  <color:keypress>(</color>     Secondary  <indent>Hide in <color:keypress>M</color> map</indent>
  <color:keypress>?</color>     Secondary  <indent>Automatically identify this item, provided you have scrolls or staves of Identify.</indent>
  <color:keypress>#</color>     Terminal   <indent>Auto-inscribe matching objects with whatever text follows this key. Note that Primary and Secondary action letters must be placed at the <color:keyword>beginning</color> of a rule line, while Terminal action letters must be placed at the <color:keyword>end</color> of a rule line.</indent>

Every rule must have one Primary action (which is assumed to be Pick Up if nothing else is specified). It can have 0 or more secondary actions, and the sole Terminal action is also optional.
</indent>
<topic:Nouns><color:B>Table IV: Rules: Nouns</color>
  <indent><color:G>Noun       Explanation</color>
<color:R>Items</color>      <indent>Applies to everything. This is useful for very general rules, such as ~?<color:G>unidentified</color> <color:R>items</color> to automatically identify, but leave on the ground, everything not yet identified; or even <color:keyword>items</color> to pick everything up! The noun <color:keyword>items</color> is implicitly assumed if no other noun is specified.</indent>

<color:R>Weapons</color>    <indent>Applies to all melee weapons (including diggers), but not to missile weapons.</indent>

<color:R>Favorite Weapons</color>
           <indent>Applies to all weapons, including shooters, that your class likes. For example, Weaponmasters specialize in a given type of weapons, such as Axes or Crossbows; whatever their speciality is, this "noun" will apply to these preferred items. Note that the game considers <color:keyword>favorite weapons</color> a noun, not an adjective followed by a noun.</indent>

<color:R>Hafted Weapons</color>
           <indent>Applies to all hafted weapons like Maces, Flails and War Hammers; these weapons are preferred by Priests. Like the <color:R>Favorite Weapons</color> "noun" above, the Mogaminator views this as a single noun, not an adjective followed by a noun.</indent>

<color:R>Diggers</color>    <indent>Applies to all digging implements, such as shovels, mattocks and picks.</indent>

<color:R>Shooters</color>   <indent>Applies to anything that goes in the shooter shot, including slings, bows, crossbows, harps and guns.</indent>

<color:R>Ammo</color>       <indent>Applies to all ammunition for missile weapons: arrows, pebbles, shots and bolts.</indent>

<color:R>Armors</color>     <indent>Applies to all forms of armor (for more specific nouns, see below):</indent>
<color:R>Suits</color>      Applies to body armor.
<color:R>Shields</color>    Applies to shields.
<color:R>Cloaks</color>     Applies to cloaks.
<color:R>Helms</color>      Applies to helmets and crowns.
<color:R>Gloves</color>     Applies to gloves.
<color:R>Boots</color>      Applies to boots.

<color:R>Wands</color>      Applies to wands.

<color:R>Staves</color>     <indent>Applies to staves (the magical device kind, not the quarterstaff kind!). For example, try <color:R>staves</color>:healing or <color:R>staves</color>:speed.</indent>

<color:R>Rods</color>       Applies to rods.

<color:R>Potions</color>    <indent>Applies to potions. (Watch out - many potion names, like Potion of Strength and Potion of Restore Strength, partially match each other.)</indent>

<color:R>Scrolls</color>    Applies to scrolls.

<color:R>Rings</color>      Applies to rings.

<color:R>Amulets</color>    Applies to amulets.

<color:R>Lights</color>     Applies to anything that goes in the light source slot.

<color:R>Spellbooks</color> <indent>Applies to all spellbooks. If you are a non-caster (and non-seller) you can specify !<color:G>spellbooks</color> with impunity, but as a book caster you probably want to combine this with adjectives.</indent>

<color:R>Junk</color>       <indent>Applies to complete junk like broken sticks. Also covers statues (which are potentially sellable); use !<color:G>worthless</color> <color:R>junk</color> to exclude them.</indent>

<color:R>Corpses</color>    <indent>Applies to corpses, which are potentially useful; Possessors can possess them, Igors cut them apart, some demons eat humanoid corpses, and <color:G>wanted</color> <color:R>corpses</color> can be turned in at the Bounty Office.</indent>

<color:R>Skeletons</color>  <indent>Like corpses, you may turn in <color:G>wanted</color> <color:R>skeletons</color> at the Bounty Office. Archers may also use skeletons to make arrows and bolts.</indent>

If you are using keywords to build a match predicate, then you must specify exactly one noun, but may use as many adjectives as you like.
</indent>
<topic:Adjectives><color:B>Table V: Rules: Adjectives</color>
  <indent>Because there are so many adjectives, they are grouped here by kind.</indent>

<color:o>Object Knowledge</color>
<color:G>Unsensed</color>     <indent>Applies to objects that have not yet been identified or pseudo-identified.</indent>

<color:G>Unidentified</color> <indent>Applies to objects that have not yet been identified (e.g. ?<color:G>unidentified</color> <color:R>items</color> to auto-identify everything).</indent>

<color:G>Unaware</color>      <indent>Applies to objects whose flavor has not yet been identified.</indent>

<color:G>Identified</color>   <indent>Applies all objects that have been identified.</indent>

<color:G>*Identified*</color> <indent>Applies to fully identified objects, and is rarely needed.</indent>

<color:o>Object Quality</color>
<color:G>Average</color>      <indent>Applies to all average items. Some players like to combine this with the ! action letter quite early; but that can be inconvenient if you are looking for a reforge base item.</indent>

<color:G>Good</color>         <indent>Applies to all good items.</indent>

<color:G>Ego</color>          <indent>Applies to all excellent objects. See <link:objects.txt#EgoItems> for more information.</indent>

<color:G>Artifact</color>     <indent>Applies to all artifacts. See <link:objects.txt#SpecialItems> for more information.</indent>

<color:G>Cursed</color>       <indent>Applies to all cursed items. Use sparingly; cursed items can be good, and !<color:G>worthless</color> <color:R>items</color> catches the real junk.</indent>

<color:G>Nameless</color>     <indent>Applies to all objects that are neither artifacts nor ego items.</indent>

<color:G>Rare</color>         <indent>Applies to all objects in a specific, hardcoded list of object types; for example, Blades of Chaos and Maces of Disruption are <color:G>rare</color>, as are all dragon armor pieces including dragon scale mail.</indent>

<color:G>Common</color>       <indent>Applies to all objects that are <color:v>not</color> <color:G>rare</color>; so a Long Sword is common, but a Blade of Chaos is not.</indent>

<color:G>Worthless</color>    <indent>Any object whose value is 0 is considered <color:G>worthless</color>. Watch out a bit, though: for example, corpses are "worthless", but you still want to keep some of them. The default preferences have !<color:G>worthless</color> <color:R>items</color> at the very bottom, below rules that protect useful worthless things.</indent>

<color:G>Icky</color>         <indent>Icky items are items unsuitable for your class; they may be an Icky Wield or cause other class-specific penalties.</indent>

<color:o>Object Attributes</color>
<color:G>Dice Boosted</color> <indent>When used with <color:R>weapons</color> or <color:R>shooters</color>, this adjective indicates that the object's damage dice or damage multiplier are higher than usual for the object kind.</indent>

See the <color:o>Special Clauses</color> below for more information about matching on an object's attributes.

<color:o>Spellbook Adjectives</color>
<color:G>Unreadable</color>     <indent>This will match spellbooks that you cannot use, either because you are playing a class that does not have realms or because the book does not belong to a realm you selected.</indent>

<color:G>First Realm's</color>  <indent>Applies to books from your primary magic realm, if any.</indent>

<color:G>Second Realm's</color> <indent>Applies to books from your secondary magic realm, if any.</indent>

<color:G>First</color>
<color:G>Second</color>
<color:G>Third</color>
<color:G>Fourth</color>         <indent>Each realm of magic has four spellbooks; these adjectives refer to each of these books by number. Usually, the first and second books are cheap, while the third and fourth are valuable.</indent>

<color:o>Corpse Adjectives</color>
<color:G>Wanted</color>       <indent>Combine with <color:R>corpses</color> or <color:R>skeletons</color> to indicate the remains of a wanted monster.</indent>

<color:G>Unique</color>       <indent>Combine with <color:R>corpses</color> or <color:R>skeletons</color> to indicate the remains of a unique monster. (Maybe you're a collector?)</indent>

<color:G>Human</color>        <indent>Some characters use humanoid corpses either as food, or as part of a ritual to summon a powerful demonic ally. For these situations, add a rule like ~<color:G>human</color> <color:R>corpses</color> to your preferences, though ~<color:G>special</color> <color:R>items</color> will also work.</indent>

<color:o>Miscellaneous</color>
<color:G>Collecting</color>   <indent><color:G>Collecting</color> <color:R>items</color> matches stackable objects identical with objects already in your pack.</indent>

<color:G>Special</color>      <indent><color:G>Special</color> <color:R>items</color> are objects your race or class needs; objects that are usually considered junk by default. For example, some characters receive scant sustenance from normal food and must consume humanoid corpses (yum!). Daemon casters use corpses for various spells. Archers use skeletons to make their own ammo. Beastmasters and Cavalry actually enjoy wands of Haste Monster. Such special scenarios are handled with this adjective. <color:y>Note that this is a meaning completely distinct from the object feeling {special}, which refers to artifacts.</color></indent>

<color:G>Unusable</color>     <indent>Applies to wearable items you currently have no equipment slots for. Especially handy in Monster Mode - still, use with some care in case you acquire new slots over time...</color>
</indent>
<topic:SpecialClauses><color:B>Table VI: Rules: Special Clauses</color>
  <indent>In the following clauses, N refers to a digit (0-9); the sequence NN means you may type one or two digits, and can therefore enter any number between 0 and 99. Analogously, NNNNNN allows numbers between 0 and 999999. If you enter too many digits, the parser will not recognize your special clause, and you will get unsatisfactory results from your rule.

<color:G>Special Clause          Explanation</color>
<color:o>More Dice Than NN</color>       <indent>This clause applies to <color:R>weapons</color> only, and is true whenever the maximum possible damage exceeds the number you enter. For example a (2d5) weapon will match <color:o>more dice than 9</color> but will fail to match <color:o>more dice than 10</color>.</indent>

<color:o>More Bonus Than NN</color>      <indent>An object's bonus is here the largest of its pval, to-hit, to-dam and to-AC. For example, <color:R>rings</color> <color:o>more bonus than 9</color>:speed will pick up rings of speed (+10) or better, but will not match other rings of speed; and <color:R>suits</color> <color:o>more bonus than 19</color>:power dragon says that you would quite like a Power Dragon Scale Mail, but only if its to-AC bonus is +20 or better!</indent>

<color:o>More Level Than NN</color>      <indent>This clause is intended to be used on <color:R>corpses</color> so that Possessors can manage the mountains of dead bodies they create. You can also use it with other objects, in which case it corresponds to the level of the object, or its ego type. For devices, it matches the power level of the device.</indent>

<color:o>More Charges Than NN</color>    <indent>Intended for magical devices; maybe you already have a Staff of Cure Wounds with 20 charges and consider anything smaller than that to be junk.</indent>

<color:o>More Weight Than NN</color>     <indent>Some classes have weight restrictions on armor, like Monks, Scouts and Ninjas. Other classes, like Maulers, prefer very heavy weapons. This clause matches against the weight of the object, in pounds; so <color:R>weapons</color> <color:o>more weight than 39</color> will match weapons weighing at least 39.1 lbs.</indent>

<color:o>More Value Than NNNNNN</color>  <indent>This clause matches against the known value of the object. Use with care, since unknown or even un-*identified* objects may have "known" values lower than the actual value.</indent>
</indent>
<topic:CondiSyntax><color:B>Table VII: Conditionals: Syntax</color>
  <indent>Conditional statements have the following syntactic form:

?:<color:B>Expression</color>

Conditional expressions use the following (partial) grammar:

<color:B>Expression</color> <color:y>:=</color> <indent><style:indent><color:r>Literal</color> <color:y>|</color> <color:v>Variable</color> <color:y>|</color> [<color:R>Function</color> <color:B>Expression</color><color:y>*</color>]</style></indent>
<color:R>Function</color>   <color:y>:=</color> <indent><style:indent>IOR <color:y>|</color> OR <color:y>|</color> AND <color:y>|</color> NOT <color:y>|</color> EQU <color:y>|</color> LEQ <color:y>|</color> GEQ</style></indent>
<color:v>Variable</color>   <color:y>:=</color> <indent><style:indent>$RACE <color:y>|</color> $CLASS <color:y>|</color> $REALM1 <color:y>|</color> $LEVEL <color:y>|</color> $MONEY <color:y>|</color> ...</style></indent>
<color:r>Literal</color>    <color:y>:=</color> <indent><style:indent>23 <color:y>|</color> 52 <color:y>|</color> Rage-Mage <color:y>|</color> High-Elf <color:y>|</color> ... </style></indent>

Note that unlike above, square brackets are part of the syntax of expressions and do <color:v>not</color> indicate optional elements in the grammar. Rather, function application expressions are always surrounded with square brackets.

When the expression on a conditional line evaluates to FALSE or 0, then any subsequent rules will be ignored. When the expression evaluates to TRUE or non-zero, then any subsequent rules will be applied. See <link:editor.txt#Conditionals> above for details.
</indent>
<topic:CondiFuncs><color:B>Table VIII: Conditionals: Functions</color>
  <indent><color:G>Function    Explanation</color>
  <color:keyword>IOR</color>       <indent>Inclusive Or: [IOR a b c ...] is TRUE if the value of <color:o>any</color> subexpression a, b, c, ... is TRUE.</indent>
  <color:keyword>OR</color>        <indent>Same as IOR.</indent>
  <color:keyword>AND</color>       <indent>Logical And: [AND a b c ...] is TRUE if the values of <color:o>all</color> subexpressions a, b, c, ... are TRUE.</indent>
  <color:keyword>NOT</color>       <indent>[NOT a] is TRUE if a is FALSE, and vice versa. Use this when you want to take an action when something is <color:o>not</color> true.</indent>
  <color:keyword>EQU</color>       <indent>[EQU v a b c ...] is TRUE when the value of v is <color:o>one</color> of the values a, b, c, ... Comparison is by string. Typically, you use this with v being a built-in variable expression like <color:keyword>$CLASS</color> (see below), and the remaining arguments being strings to test like <color:keyword>Mage</color> or <color:keyword>Sorcerer</color>. Note that string literals are not quoted and therefore may not contain spaces.</indent>
  <color:keyword>LEQ</color>       <indent>[LEQ v a] is TRUE when the integer value of v is <color:o>less than or equal to</color> the integer value of a. Note that while EQU treats its arguments as strings, LEQ treats them as numbers.</indent>
  <color:keyword>GEQ</color>       <indent>[GEQ v a] is TRUE when the integer value of v is <color:o>greater than or equal to</color> the integer value of a. Note that while EQU treats its arguments as strings, GEQ treats them as numbers.</indent>
</indent>
<topic:CondiVars><color:B>Table IX: Conditionals: Variables</color>
  <indent><color:G>Variable    Explanation</color>
<color:keyword>$RACE</color>       <indent>Returns the name of your race; for example, <color:keyword>Snotling</color> or <color:keyword>High-Elf</color>.</indent>
<color:keyword>$CLASS</color>      <indent>Returns the name of your class; for example, <color:keyword>Warrior-Mage</color> or <color:keyword>Mindcrafter</color>. Note that if you are playing in <color:r>Monster</color> mode, then this variable always returns <color:keyword>Monster</color>, while $RACE returns the actual monster race you are playing, such as <color:keyword>Lich</color> or <color:keyword>Dragon</color>.</indent>
<color:keyword>$SUBCLASS</color>   <indent>Returns the name of your subclass, if any. This could be, say, <color:keyword>Yeqrezh</color> on a Disciple or <color:keyword>Evil Bias</color> on a Gray-Mage.</indent>
<color:keyword>$SPECIALITY</color> <indent>Returns the name of your speciality, for example <color:keyword>Axes</color> on a Weaponmaster or <color:keyword>Potions</color> on a Devicemaster. Returns <color:keyword>none</color> for all classes except those two.</indent>
<color:keyword>$REALM1</color>     <indent>Returns the name of your first realm, if any; for example, <color:keyword>Chaos</color> or <color:keyword>Sorcery</color>. If the player does not have a first realm, then this variable returns <color:keyword>none</color>.</indent>
<color:keyword>$REALM2</color>     <indent>Returns the name of your second realm, if any; for example, <color:keyword>Life</color> or <color:keyword>Death</color>. If the player does not have a second realm, then this variable returns <color:keyword>none</color>.</indent>
<color:keyword>$LEVEL</color>      <indent>Returns your current level. Typically, you combine this with GEQ or LEQ to test the level against a threshold, such as <color:v>[LEQ $LEVEL 34]</color>.</indent>
<color:keyword>$SELLING</color>    <indent>Returns <color:keyword>Off</color> if you have turned the <color:keyword>no_selling</color> option on, and <color:keyword>On</color> otherwise.</indent>
<color:keyword>$MONEY</color>      <indent>Returns the amount of gold the player has. Like $LEVEL, use this with GEQ or LEQ to test whether your player is rich or poor.</indent>

All variables begin with a <color:keypress>$</color> character to distinguish them from string literals. Note that some variables allowed by edit files are not allowed here, and some variables that are allowed here (like $SYS and $KEYBOARD) are unlikely to apply and so not documented.
</indent>
<topic:CondiLits><color:B>Table X: Conditionals: Literals</color>
  <indent><color:G>Literal     Explanation</color>
<color:keyword>Number</color>      <indent>Numbers are written like <color:keyword>105</color> or <color:keyword>32</color>.</indent>
<color:keyword>String</color>      <indent>Strings are written like <color:keyword>High-Mage</color> or <color:keyword>Beholder</color>. Note that string literals are not quoted and therefore may not contain spaces; hyphenate if necessary (<color:keyword>Filthy-Rag</color> for the Filthy Rag race).</indent>
</indent><color:D>
--
Original   : PosChengband 4.0.0
Updated    : FrogComposband 7.1.liquorice
</color>
