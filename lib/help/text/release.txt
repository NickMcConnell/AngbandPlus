Poschengband Release Notes

Version 7.3

This release continues the game engine re-write. Due to redesign, old 
savefiles cannot be supported.

  Monster Race Info: I've completed changes to monster race definition 
  that began with the 7.0 re-writes to monster spells and melee. This 
  release features new syntax for defining monster races. "Templates" 
  are supported so that classes of similar monsters can more easily be 
  defined. We no longer use arbitrary numeric idenitifiers for races 
  but instead use short descriptive keys such as "D.black" for an 
  "Ancient black dragon". This allows r_info to be split into multiple 
  files and arranged in a logical manner. Future design can add new 
  monsters where it makes sense to do so (rather than at the end) and 
  files can be re-arranged as needed. I've implemented the "friends" 
  concept from Vanilla to allow for heterogeneous monster packs. For 
  example, you will notice packs of human adventurers early on, 
  composed of low level human classes. And, of course, the code has 
  been massively cleaned up.

  A new terrain system: I've completely re-written the "feature" system 
  in a much more sensible manner. (For example, door tiles have state 
  that indicates whether they are locked or jammmed, and, if so, a 
  parameter that indicates the difficulty of picking the lock or 
  forcing the door. Hitherto, there was a separate "feature" for each 
  possible state, and each feature "mimicked" a base state for display 
  purposes.) In addition, webs have been re-desinged with ideas from 
  Vanilla.
   
  Graphics: Many new tiles have been added and terrain tiles have been 
  enhanced to support the lighting changes from 7.2.2.

Version 7

With this version, I have begun an extensive rewrite of the game 
engine. With thousands of changes, I can only give a high level 
overview here. These notes were written for 7.2.2, though many of the 
changes discussed come from earlier versions in the 7x series.

  A new monster spell system: Rather than only supporting 95 hard-coded 
  spells, the new system is completely open-ended and there are 
  currently hundreds of different spells. It is very easy to add new 
  spells and you will notice that many monsters do unique things that 
  nobody else can do. I won't spoil any surprises, but keep your eyes 
  open when facing an unknown monster.

  A new 'cave' management system: The game engine now handles multiple 
  levels in memory as well as an 'infinitely' large wilderness. From 
  the player's perspective, there is no such thing as 'level 
  generation': levels simply exist. So, if you take the stairs, the 
  level you left remains unchanged. If you stair climb, you are simply 
  wasting your time, as you are no longer scumming for new levels, but 
  toggling back and forth from one existing level to another existing 
  level. But this change is even deeper, since the game engine actually 
  processes nearby levels. This means that monsters on levels close to 
  the player's current level can wake up, path-find to the stairs 
  leading to the player's level, and pop up to surprise the player! In 
  the latest version (7.2.2) frightened monsters can flee the current 
  level, path-finding to the nearest staircase. The result is a very 
  realistic game playing experience, often leading to very intense 
  bursts of danger. Beware!

  A new dungeon generator: The game now supports arbitarily sized 
  dungeon levels. For very large levels, the tunneler now works on 
  partitions of the overall level, connecting rooms in a small group, 
  and then connects the partitions. Space allocation is no longer 
  forced to 11x11 chunks, but uses a better free space algorithm. 
  Fractal cave rooms are much improved as the algorithm selects and 
  rejects fractals depending on the amount of open space. Shops and 
  recall points are guaranteed to be generated every so many levels, 
  and there can never be more than a single shop on a level.

  A new wilderness experience: The surface level can now be arbitrarily 
  large, and the game uses a page-based system for managing terrain. 
  Each page corresponds to a single 'wilderness tile' (currently sized 
  128x64) and there are always 9 pages loaded, forming a 3x3 array of 
  wilderness tiles centered around the player. As the player moves 
  about, old pages are discarded, and new pages are created keeping the 
  player centered in the 3x3 viewport. This gives a much better surface 
  experience.
  
  The game also supports multiple 'worlds'. In the Middle Earth module, 
  for example, the player begins in The Desolation of Smaug, a world 
  loosely based on Tolkien's The Hobbit. This world has its own map and 
  a goal the player must achieve: Kill Smaug the Golden and a special 
  travel portal is generated that allows the player to move to the next 
  world and face greater challenges.
  
  I also added code to randomly generate worlds. In the Amber module, 
  each game will have a unique, randomly generated terrain map. The 
  layout of the towns and location of dungeons will vary from game to 
  game, enhancing replay-ability. In fact, even the available dungeons 
  are randomly chosen from a pool of possibilities: You won't get The 
  Dragon's Lair every game! (Of course, some dungeons are fixed and 
  show up every game, such as The World of Amber, which contains the 
  world's boss monster).

  A new monster melee system: Rather than restricting monsters to just 
  4 blows, each with just 1 effect, monsters may now have as many blows 
  as I like. Each type of blow can also have as many effects as desired 
  as well. For example, a dragon has both claw attacks and a bite 
  attack. The claw attack might get 3 hits, do some base damage (no 
  resistance) and occasionaly cut the player with very sharp claws (a 
  second effect on this blow). The bite attack also does base damage 
  every hit, but might also give the player a taste of the dragon's 
  breath type (e.g. fire on a hell wyrm). For dragon's with mutltiple 
  breath types, there are multiple possibilities, and each effect has a 
  percent chance of actually applying (the base damage always applies). 
  This example illustrates the incredible flexibility now available. 
  Also, you will notice that monk monsters now use martial arts against 
  the player!
  
  Along with improved design possibilities, monsters also now gain 
  critical hits. To make this balanced, the damage dice has been 
  changed from the old XdY system to a new XdY+Z system: critical hits 
  only scale the XdY part of the XdY+Z damage roll, keeping things in 
  line. In general, the damage numbers for every monster in the game 
  have been re-normalized to keep the danger levels approximately the 
  same as before ... but beware of 'Crush' attacks. These often can do 
  enormous amounts of damage! The quality and effectiveness of monster 
  criticals can be tweaked by specifying the 'weight' of the monster 
  blow (cf The Destroyer).
  
  These improvements make possessors and mimics more interesting to 
  play. I'm heading towards rebalancing monster melee around 5 total 
  blows vs 4, which should improve the game balance wrt bonuses to 
  damage. With the XdY+Z change, I now allow access to slays and brands 
  ... provided you can find gear that grants them (e.g. rings of 
  power).

  A new monster timer system: I've completely re-coded monster timers, 
  allowing for an open-ended number of new timers. I have plans for the 
  future here, but at the moment, you will probably only notice that 
  monsters can now go berserk. Beware of Bloodthirsters and Ulik the 
  Troll: they were hard before, but in a blood frenzy, they will crush 
  you!

  A new monster drop system: The old system used flags to specify dice 
  to roll for the number of object drops, and flags to specify the 
  quality and type of drop (e.g. gold only vs good/great items). I've 
  converted this to a rule based system. Each monster race can have as 
  many drop rules as desired. Each rule has either a probability, or an 
  XdY+Z enabled quantity (obviously, the probability implies either 0 
  or 1 item). Each rule also supports a rich syntax for the type of 
  drop. Peruse r_info.txt for examples.

  A new monster AI system: Monster AI is definitely the land of 
  unintended consequences, so the current release is rather 
  conservative. You'll notice improved monster fear behaviour: 
  frightened monsters will path-find to the nearest stairs; or 
  path-find away from the player. You'll notice a change to monster vs 
  monster battles. Rather than occasionally trading blows during their 
  relentless march towards the player, hostilely aligned monsters will 
  often pair off. The result resembles a bar room brawl as monsters 
  generally attack the last enemy to hurt them. The player can sit 
  things out or can join the fray. You'll notice, if you play with 
  pets, that your minions can now path-find to a targetted enemy, which 
  is quite powerful and might need a rebalance. You should also notice 
  that some monsters are hunters: they will systematically pick hostile 
  monsters and then hunt them down one by one. Once there are no more 
  prey on the level, they will travel to a new level and repeat. Try 
  joining up with Gandalf the Grey next game (provided he is friendly)!

  A new Illusion spell realm: Hand in hand with the new monster AI is a 
  new spell realm based upon deception and trickery. It combos very 
  nicely with a rogue, though rogues are always late-bloomers when it 
  comes to magic.

  A new player attack system: Needless to say, the old attack code was 
  a horrible mess for which I am partly to blame (In fairness, I 
  repeated the existing code patterns). The new system cleans things 
  up, allowing class customizations to be coded in the class rather 
  than in the game engine (using a rich hook system). Culprits like the 
  Weaponmaster and the Samurai no longer dirty things up for everybody 
  else! The game now uses tables for slays, brands and criticals, and 
  all aspects of the game use the same mechanics. So, for example, 
  monster criticals, player melee criticals, player innate attack 
  criticals, player archery criticals, and player throwing criticals 
  *all* use the same mechanics. Nice! Display code has been improved, 
  and most spells that enhance a single round of melee attacks offer 
  "spoiler" displays rather than a vague description. You'll notice 
  this especially on the samurai. Sadly, due to the new code 
  encapsulation, I decided to remove Kendo from the Skillmaster.

  A new player timer system: Player timed effects was another eyesore 
  that I inherited from Hengband. Adding a new timer required updating 
  10 or so code files and broke savefiles! Removing an existing timer 
  re-broke savefiles. Timers are now registered in a global database. 
  Classes may add custom timers without mucking up the game engine. 
  Adding a new timer type will not break savefiles. Removing an 
  existing type will only break savefiles if the player has an active 
  instance of this timed effect when the game was saved (in which case, 
  why remove it?!). The new timer code has a nice hook system to 
  localize all aspects of timer behaviour, including bonuses, display 
  and countdown.

  A new player archery system: Archery has been recoded and cleaned up. 
  While not quite as messy as the melee system, it was pretty bad being 
  heavily customized for snipers and weaponmasters. Like the new melee 
  system, a rich hook system allows custom behaviour to be localized in 
  the class that needs it, leaving the game engine relatively clean. 
  The new archery system uses the same slay/brand/critical system as 
  melee, allowing support for all existing brands and slays (at least 
  potentially). I even added vorpal ammo (Piercing). Archery criticals 
  are much improved: try using some lead shots next game! Early ammo 
  damage dice has been toned down to reasonable levels. This makes it 
  harder to start a "pure archer" but archery, like devices, is not 
  really designed to be all-or-nothing. In both cases, you can 
  certainly "go pure" later in the game, and even win with the 
  technique, but you'll need melee in the early game to get started.

  A symmetric line generator: Now, on to game fundamentals. Most 
  players might not notice the following few changes, but they are very 
  important. Angband in general, and Hengband in particular, does not 
  have a symmetric system when it comes to both line of sight and spell 
  projection. Aside from being non-realistic, this results in 
  opportunities for exploits by experienced players as well as unfair 
  bashing of noobs who aren't aware of the quirks. The root of 
  asymmetry can be reduced to the generation of line segments from 
  point A to B. I've coded a new line generator that generates 
  symmetric paths when possible and that explores alternative paths 
  when not possible. The result is that it is always possible that the 
  path from A to B equals the path from B to A, resulting in symmetry. 
  This is done very efficiently.

  A new player 'view' system: The old update_view code tended to miss 
  about 25% of projectable points when stepping out of corridors into 
  rooms. This resulted in two things. First, a large blind spot for the 
  player to receive "It breathes death." messages if the player lacked 
  telepathy. And second, a lack of any visual indication when a monster 
  steps into view if the player has telepathy (This is thanks to 
  telepathy being fuzzy: A monster might step into direct line of sight 
  on a lighted square, but would remain fuzzy since update_view missed 
  this square). The new view code is much more accurate than the old 
  version and although the player still has occasional blind spots, 
  they usually involve unusual terrain in fractal rooms, or lie on the 
  extreme border of the view set. View is generally symmetric. For each 
  square in the view, if you move to that square, your original square 
  will be in the current view.

  A new player light system:
  I've added a new light system, consoldiating the effects of all light 
  sources into a single value. This includes contributions from the 
  player's torch and equipment, from monster light or darkness, from 
  terrain light (or darkness!!!) and from ambient sunshine on the 
  surface. To view a square, its lighting value must be positive. To 
  "see" a monster in a non-fuzzy manner, it must be standing on a 
  square with positive light. To read a scroll or spellbook, the 
  player's square must have a positive light value. This is very 
  significant since monster darkness might completely overwhelm the 
  player's torch rendering him unable to see! With the new system, 
  Vampires (monster mode) now have a rougher time of things and the 
  game is much more realistic. Attack a sleeping human and he wakes up 
  and quickly lights his lantern, causing the impudent vampire to 
  cringe back in fear! I've also added 'darksources' to complement 
  'lightsources', including a nice new dark artifact. Vampires, who 
  never had an equipment slot for 'lights' now gain one for 'darks'. As 
  an aside, the normal mode vampire race now has 'ranged noctovision' 
  rather than an 'eerie glow'. Vampires are creatures of the dark.

  A new spell projection system: I've removed project(), replacing it 
  with a new, richer, more maintainable system. I've also layered in 
  convenience functions that combine target selection with spell 
  projection allowing massive cleanup in do-spell.c. All of the 
  bookless spells have been similarly improved. This is mostly a code 
  improvement, but it did allow a few monsters to pick up some cool new 
  spells. Watch out!

  Numerous performance improvements: I've also made some modest code 
  improvements. On the surface, as mentioned above, accessing a grid 
  requires walking a page list to find the backing store for this 
  location. To improve performance, the page list is now kept in MRU 
  order, relinking as necessary during access. For monster AI, monsters 
  need to path-find to the player using a 'flow'. Theoretically, this 
  needs to be recalculated every time the player moves, but a little 
  bit of laziness really speeds things up here. In practice, the flow 
  is only ever used about 10% of the time. Since it is an expensive 
  calculation, this is a huge win, cutting the overall game CPU usage 
  in half! Also, I've made a strong effort to make sure the new game 
  mechanics perform well. Lighting, in particular, adds a bit to the 
  CPU load, but I like the new mechanic. Overall CPU usage on my 10+ 
  year old laptop is less than 1% during normal play, so I don't think 
  we have an issue here.


