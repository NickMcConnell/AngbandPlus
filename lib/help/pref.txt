<style:title>User Preferences</style>

PosChengband allows you to change various aspects of the game to suit your tastes. You may define keymaps (changing the way your keypresses are mapped to underlying commands), create macros (allowing you to map a single keypress to a series of keypresses), modify the visuals (allowing you to change the appearance of monsters, objects, or terrain features), change the colors (allowing you to make a given color brighter, darker, or even completely different), or set options (turning them off or on).

<topic:Files><style:heading>Preference Files</style>

There are two types of preference files: system preferences and user preferences. The former represent the default display and input options while the latter are optional customizations that you may add to override the default settings. System preference files, such as pref.prf, are usually stored in /lib/pref relative to the installation (e.g., on Windows, if you installed in C:\games\PosChengband then the system pref files may be found in C:\games\PosChengband\lib\pref). User preference files, on the other hand, are stored in the user directory, which is /lib/user on Windows, relative to the install location, and perhaps (though this is customizable), ~/.angband/PosChengband on Linux. In general, the location of user files is platform dependent, and can vary depending on how you configure and install the game.

During initialization, the system preference file pref.prf is loaded, and this file directs the loading of other preference files, such as pref-key.prf for keyboard mappings and pref-opt.prf for default option settings. Then, system preference files for visuals are loaded starting with font.prf for normal ASCII display and graf.prf for those weird graphics users. Each of these system preference files will redirect to another file depending on which platform you are playing (e.g. font-win.prf on Windows).

Finally, once your character has been born or loaded, the game then tries to load the following user preference files:
  <color:G>user.prf
  user-$SYS.prf
  $RACE.prf
  $CLASS.prf
  $PLAYER.prf</color>
Here, $SYS is the 3 character system code for you platform, such as win for the Windows port, or gcu for the Curses port. $RACE is your current character's race, $CLASS the class name, and $PLAYER the character's actual name, unless it contains illegal characters for your file system (e.g, naming your player <color:keypress>Mr. *WONDER*</color> is probably a bad idea). User preference files are loaded last so that you may override system preferences with your own settings. We'll discuss some examples below.

Preference files consist of a list of commands which are parsed to configure various options. These are discussed next.

<topic:Commands><style:heading>Preference Commands</style>

There are many commands for setting preferences. I'd rather not document them all, since, hopefully, you would never need to use them directly. Just keep in mind that the game has its own syntax for processing pref files, and, should you ever be curious or inclined to investigate, you can learn them by browsing existing pref files or looking at the source code. I'll give one example in the next section, and then we will discuss setting up preferences using the user interface commands which are designed to hide the details of the syntax from you.

<topic:Example><style:heading>An Example</style>

In this example, fire up the game in ASCII display and load your character. My character is imaginatively named <color:keyword>Test</color>, so when I refer to Test.prf later on, you'll know to mentally change that filename to whatever your character happens to be named.

For this example, we will be directly entering a single user preference command. To do this, we use the special <color:keyword>Enter a user pref command</color> command which is available with the <color:keypress>!</color> key. This requires us to know the exact syntax of the preference command we want, as well as the internal numeric code for various values. It is an advanced command, and normally you will want to use one of the friendlier in-game commands (for visuals, in this case) instead.

I find @ so boring to look at. Let's use <color:y>@</color> instead! To make this change, type <color:keypress>!</color> then enter <color:keypress>R:0:11:@</color>. The <color:keypress>R</color> preference command is used to set display values for monster races (which, as you may know, are defined in /lib/edit/r_info.txt). The game uses the special 0'th entry in the monster race table as the display options for the player. That we entered <color:keypress>R:0</color> says we wish to override this value. The next field is the attribute to use. Since we are in ASCII text mode, we need to enter a value of 0 to 15 for one of the available 16 colors. I picked 11 for yellow. Finally, we keep the @ for the character for this monster race. After entering this command, you'll notice the player is still a plain old @. Type <color:keypress>^R</color> to force a redraw, and now you should be proudly displayed as <color:y>@</color>.

If we were to restart the game at this point, our change would be lost. We'll discuss the <color:keyword>Interact with Visuals</color> command in just a moment, but for now, just blindly press <color:keypress>%</color> followed by <color:keypress>1</color> to dump the current monster race visuals to a user preference file. I get the file Test.prf listed as the default (remember, my character is actually named Test). You should keep this $NAME.prf suggestion since, as I'm sure you remember, this is one of the files the game tries to automatically load during initialization. Keeping this value ensures our changes get automatically used the next time we play this character! So press <color:keypress>ENTER</color> to actually dump your preferences.

Go ahead and restart the game in ASCII mode to confirm the change persists. Now, restart the game in graphics mode and what do you see? For me, on Linux, I get graphics for objects and terrain features, but all of the monsters are displayed in ASCII. (On Windows, you might need to restart, turn on graphics, and then restart again ... I can't confirm this just now). That's because the we dumped the monster visuals while in text mode, and the game didn't just dump the one entry we changed: It dumped them all! Let's go ahead and call this a feature: If you ever wanted to play in a mixed-mode with graphical terrain but craved the nostalgia of ASCII monsters, well, there you go! You can do this.

One final comment: You may edit the Test.prf file you dumped directly, or you may delete it. Since this was an example, you probably just want to delete it, but you should know that the game stores all user preferences for your current character here (by default), and this includes any macros you might have defined. You can also get rid of the ASCII monsters (assuming you want to play in graphics mode) by choosing <color:keypress>%</color> and then choosing the option to <color:keyword>Reset Visuals</color>, followed by re-dumping monster visual settings in you $NAME.prf file. That's fine too, and we'll discuss interacting with visuals through the user-interface in detail in the next section.

<topic:Visuals><style:heading>Interacting with Visuals (<color:keypress>%</color>)</style>

Now, you may have found the need to type in a cryptic instruction like <color:keypress>R:0:11:@</color> rather disgusting. If so, you can relax: There is an easier way. Let us repeat the change from the previous section using the user interface command to interact with visuals. Press <color:keypress>%</color> and then choose the menu option for changing a monster attribute in visual mode (currently, this is <color:keypress>7</color> and, for the purposes of the present discussion, your player is a monster!). What do you see?
<style:screenshot>
Visuals - Monsters

Group                  Name                                   Idx   Sym
================================================================================
<color:B>Uniques</color>              | <color:B>a Plain Gold Ring</color>                      <color:B>864</color>     <color:y>=</color>
Ridable monsters     | Morgoth, Lord of Darkness              861     <color:D>P</color>
Wanted monsters      | The Serpent of Chaos                   862     <color:D>J</color>
Amberite             | The Unicorn of Order                   859     q
Olympian             | Oberon, King of Amber                  860     <color:v>p</color>
Ant                  | Sauron, the Sorcerer                   858     <color:o>p</color>
Bat                  | Great Cthulhu                          857     <color:g>U</color>
Centipede            | Gothmog, the High Captain of Balrogs   856     <color:R>U</color>
Dragon               | Cerberus, Guardian of Hades            853     <color:r>C</color>
...
<dir>, 'v' for visuals, 'c' to copy, '=' for more info, ESC
</style>
Well, I guess this is one way to see all the uniques in the game! I'll assume if you are brave enough to be reading this topic than you are already an advanced player and know the uniques. Anyway, the left area of the display gives various monster groups, and the right shows how the monsters in the current group look. Go ahead and move down the list of groups, all the way to the very last one. Once you select the group called Player, hit the right arrow to move into the list of "monsters" for this group, and select the one also called Player. That is you! Your screen should look something like:
<style:screenshot>
Visuals - Monsters

Group                  Name                                   Idx   Sym
==============================================================================
Zombie/Mummy         | Mimic                                  1131    @
Angel                | <color:B>Player</color>                                 <color:B>0</color>       @
Bird                 |
...
Mushroom patch       |
Ball                 |
<color:B>Player</color>               |

<dir>, 'v' for visuals, 'c' to copy, '=' for more info, ESC
</style>
Now, let's follow the instructions on the bottom of the screen and press <color:keypress>v</color> to change the visuals for the currently selected monster:
<style:screenshot>
Visuals - Monsters

Group                  Name                                   Idx   Sym
==============================================================================
Zombie/Mummy         | <color:B>Player</color>                           <color:B>0b/40</color> <color:B>0</color>       <color:y>@</color>
Angel                | <color:d>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Bird                 | 6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn
Canine               | <color:s>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Elemental            | <color:o>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Dragon Fly           | <color:r>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Ghost                | <color:g>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Hybrid               | <color:b>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Insect               | <color:u>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Snake                | <color:D>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Killer Beetle        | <color:W>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Lich                 | <color:v>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Multi-Headed Reptile | <color:y>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Mystery Living       | <color:R>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Ogre                 | <color:G>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Giant Humanoid       | <color:B>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Quylthulg            | <color:U>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Reptile/Amphibian    | <color:d>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Spider/Scorpion/Tick | <color:w>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Troll                | <color:s>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Vampire              | <color:o>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Wight/Wraith/etc     | <color:r>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Xorn/Xaren/etc       | <color:g>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Yeti                 | <color:b>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Zephyr Hound         | <color:u>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Mimic                | <color:D>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Wall/Plant/Gas       | <color:W>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Mushroom patch       | <color:v>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
Ball                 | <color:y>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>
<color:B>Player</color>               | <color:R>6789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmn</color>

<dir>, ENTER to accept, 'c' to copy, ESC
</style>
You cannot tell from the screenshot, but I moved the cursor down to the yellow @, since this is the display we setup manually in the last section. If you look at the top line, you see <color:B>0b/40</color> which is hexadecimal for 11 (which is yellow) and the ascii character code for @. Go ahead and choose <color:keypress>ENTER</color> to accept the change.

All of this accomplished the same change as <color:keypress>!</color> followed by <color:keypress>R:0:11:@</color> which we did in the last section. It's quite a bit more work, but you can see what your change will be as you make it, so it is easier to do things correctly. If you repeat this in graphics mode, you'll find that it is actually much more convenient to use the user interface to setup and change visuals.

When you want to keep your changes, you use the option to dump monster visuals, just like before. I'll let you work through the other visual options, both in text mode and in graphics mode, since the process to make changes is the same. You can configure not just monster visuals, but objects and terrain features as well. Be sure to dump your changes so they are remembered for this character.

<topic:Colors><style:heading>Interacting with Colors (<color:keypress>&</color>)</style>

This option allows you to configure the basic colors used by the game. However, this option will not work on all systems. For example, the Curses port uses the console's current profile rather than the in-game color table, so setting colors through the game will not work (Instead, edit the current profile for your console, or switch to a different profile). Furthermore, while the UI is pretty easy to figure out, it is rather painful to use in practice since there are commands to increase or decrease the respective r, g and b values of the current color table entry. But there is no option to just type in a desired value. Here, I recommend you use the option to dump colors to your $NAME.prf file, and then close the game and manually edit the rgb values in your favorite text editor, using whatever visual color tools your are available on your operating system. At some point, we should really fix up this command to be more friendly!

<topic:Options><style:heading>Interacting with Options (<color:keypress>=</color>)</style>

The various game options are documented elsewhere (see <link:option.txt>). Here, I'll just mention that there exist two preference commands for turning options on and off. You may use <color:keypress>Y:option_name</color> to turn an option on and <color:keypress>X:option_name</color> to turn it off (Use the <color:keypress>!</color> option, or embed this preference command inside a macro as discussed below). Obviously, replace option_name with the exact name for the option you wish to configure. The list of internal option names is documented in the previous link.

<style:note>Note: <color:normal>You cannot alter cheating options with the user pref commands X or Y. Nor can you configure these options in the <color:keyword>pref-opt.prf</color> system preference file. To cheat, you need to to enable the <color:keyword>allow_debug_opts</color> and then set the option through the user interface. This will mark your character as a cheater, though!</color></style>

<topic:Macros><style:heading>Interacting with Macros (<color:keypress>@</color>)</style>

The "Interact with macros" command allows you to define or remove "macros", which are mappings from a single logical keypress to a sequence of keypresses, allowing you to use special keys on the keyboard, such as function keys or keypad keys, possibly in conjunction with modifier keys, to "automate" repetitive multi-keypress commands that you use a lot.

Since macros represent keypress sequences, and not all keypresses have a printable representation, macro triggers and actions must often be "encoded" into a human readable form. This is done using several types of encoding, including "\xHH" for character number HH in hexadecimal, "\e" for the "escape" code, "\n" for the "newline" code, "\r" for the "return" code, "\s" for the "space" code, "\\" for backslash, "\^" for caret, and "^X" for the code for any "control" key "ctrl-X".

In PosChengband, name of special keys as macro-trigger is displayed using its real name, for example the Control-key plus the F1-key is displayed as "\[control-F2]", and the Alt-key plus the G is displayed as "\[Alt-G]". In other variant these special keys will be, currently, displayed using its key-code.

Note that the "action" of a macro will not be checked against other macro triggers, so you cannot make infinite loops. You may specify extremely long macros, but you are limited in length by the underlying input mechanisms, which in general limit you to about 1024 keys in both triggers and actions.

The special "\" command (which must be encoded in macros as "\\") is very useful in macros, since it bypasses all keymaps and allows the next keystroke to be considered a command in the underlying PosChengband command set. For a list of the PosChengband command set, see the "command.txt" help file. For example, a macro which maps Shift-KP6 to "\" + "." + "6" will induce the "run east" behavior, regardless of what keyset the user has chosen, and regardless of what keymaps have been defined.

Macros can be specified in user pref files as a pair of lines, one of the form "A:<str>", which defines the encoded macro action, and one of the form "P:<str>", which defines the encoded macro trigger.

The "Interact with macros" command also allows you to define "keymaps", which are vaguely related to macros. A keymap maps a single keypress to a series of keypresses, which bypass both other keymaps and any macros. PosChengband uses keymaps to map the original and the roguelike keysets to the underlying command set, and allows the user to modify or add keymaps of their own. Note that all keymap actions must be specified using underlying commands, not keypresses from the original or roguelike keysets. The original keyset is almost identical to the underlying keyset, except that "numbers" are mapped to ";" plus a direction, "5" is mapped to ",", and a few control-keys are mapped to various things. See "command.txt" for the full set of underlying commands. Some uses for keymaps include the ability to "disable" a command by mapping it to "\x00".

Keymaps can be specified in user pref files as pairs of lines of the form "A:<str>" "C:<T>:<key>", where <str> is the encoded keymap action, <T> is the keyset (0 for original and 1 for roguelike), <key> is the encoded trigger key.

<topic:MacroSamples><style:heading>Some Macro Examples</style>

You may now forget about keymaps and pretend that macros are things that allow you, the user, to bind a sequence of commands to a single keystroke. Here are some of my personal examples:

<color:G>Example #1: Archery</color>
Inscribe @f1=g on your primary ammo, and then add the macro sequence *tf1 to your favorite key (I like to use -). This will automatically target the nearest opponent and fire the inscribed ammo. The =g part of the inscription allows you to automatically pick up any unbroken projectiles once the battle is over. (This assumes that use_old_target is turned on, which it is by default. Otherwise, you'll need to work out for yourself the altered macro action).

<color:G>Example #2: Resting</color>
Add the macro sequence R&\r to a convenient key (I use F1 for this). Normally, resting requires 3 keystrokes and it is frustrating when your resting gets constantly interrupted. Pressing F1 reduces this annoyance by a factor of 3.

<color:G>Example #3: Tunneling</color>
Inscribe your wand of stone to mud with @am and then bind the macro sequence *\eam to your favorite key. Perhaps the only disadvantage of the use_old_target option occurs when you are done fighting, and want to something else like clear away some rubble. This macro first dismisses the old target with *\e and then aims your inscribed wand of stone to mud. You will be prompted for the desired direction.

<color:G>Example #4: Mass Identify</color>
Inscribe @ui on your staff of identify (The one with 50+ charges) and then bind ui* to your favorite knowledge key. Use this macro once your pack has filled up with unknown, but pseudo-identified objects.

<color:D>
Original   : Alexander Cutler and Andy Astrand
Updated    : (2.7.6) by Russ Allbery (rra@cs.stanford.edu)
Updated    : (2.7.9) by Ben Harrison (benh@phial.com)
Updated    : Zangband 2.2.0 through 2.2.6c by Robert Ruehlmann
Updated    : Zangband DevTeam
Updated    : Hengband 1.7.0
Updated    : PosChengband 4.0.0
</color>
